;------------------------------------------------------------------------------
; List of all the CPU opcodes
;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
; 8-bit load group
;------------------------------------------------------------------------------
[z80]		ld {b c d e ixh ixl . a}, {. . . . ixh ixl . .}	=> DD, 40 + $1*8 + $2
[z80]		ld {b c d e iyh iyl . a}, {. . . . iyh iyl . .}	=> FD, 40 + $1*8 + $2

			ld {b c d e   h   l . a},  N			=>     06 + $1*8, N
[rabbit]	ld {b c d e   h   l . a}', N			=> 76, 06 + $1*8, N
[z80]		ld {. . . . ixh ixl . .},  N			=> DD, 06 + $1*8, N
[z80]		ld {. . . . iyh iyl . .},  N			=> FD, 06 + $1*8, N

			ld {b c d e   h   l . a},  (hl)		=>         46 + $1*8
[rabbit]	ld {b c d e   h   l . a}', (hl)		=> 76,     46 + $1*8

			ld {b c d e   h   l . a},  (ix + D)	=>     DD, 46 + $1*8, D
[rabbit]	ld {b c d e   h   l . a}', (ix + D)	=> 76, DD, 46 + $1*8, D

			ld {b c d e   h   l . a},  (iy + D)	=>     FD, 46 + $1*8, D
[rabbit]	ld {b c d e   h   l . a}', (iy + D)	=> 76, FD, 46 + $1*8, D

			ld (hl),     {b c d e   h   l . a}	=>     70 + $1
			ld (ix + D), {b c d e   h   l . a}	=> DD, 70 + $1, D
			ld (iy + D), {b c d e   h   l . a}	=> FD, 70 + $1, D

			ld (hl),     N		=>     36,    N
			ld (ix + D), N		=> DD, 36, D, N
			ld (iy + D), N		=> FD, 36, D, N

			ld a,  ({bc de})	=> 	   0A + $1*10
[rabbit]	ld a', ({bc de})	=> 76, 0A + $1*10

			ld ({bc de}), a		=> 	   02 + $1*10
			
			ld a,  (MN)			=> 	   3A, N, M
[rabbit]	ld a', (MN)			=> 76, 3A, N, M
			
			ld (MN), a			=> 	   32, N, M

;------------------------------------------------------------------------------
; 8-bit arithmetic group
;------------------------------------------------------------------------------
			{add adc sub sbc and xor or cp} a, {b c d e   h   l (hl)   a}	=>     80 + $1*8 + $2
			{add adc sub sbc and xor or cp}    {b c d e   h   l (hl)   a}	=>     80 + $1*8 + $2
			
			{add adc sub sbc and xor or cp} a, {. . . .   .   . (ix+D) .}	=> DD, 80 + $1*8 + $2, D
			{add adc sub sbc and xor or cp}    {. . . .   .   . (ix+D) .}	=> DD, 80 + $1*8 + $2, D
			
			{add adc sub sbc and xor or cp} a, {. . . .   .   . (iy+D) .}	=> FD, 80 + $1*8 + $2, D
			{add adc sub sbc and xor or cp}    {. . . .   .   . (iy+D) .}	=> FD, 80 + $1*8 + $2, D
			
[z80]		{add adc sub sbc and xor or cp} a, {. . . . ixh ixl .    .}	=> DD, 80 + $1*8 + $2
[z80]		{add adc sub sbc and xor or cp}    {. . . . ixh ixl .    .}	=> DD, 80 + $1*8 + $2
[z80]		{add adc sub sbc and xor or cp} a, {. . . . iyh iyl .    .}	=> FD, 80 + $1*8 + $2
[z80]		{add adc sub sbc and xor or cp}    {. . . . iyh iyl .    .}	=> FD, 80 + $1*8 + $2

			{add adc sub sbc and xor or cp} a, N			=>     C6 + $1*8, N
			{add adc sub sbc and xor or cp}    N			=>     C6 + $1*8, N

[rabbit]	{add adc sub sbc and xor or . } a', {b c d e   h   l (hl)   a}	=> 76,     80 + $1*8 + $2
[rabbit]	{add adc sub sbc and xor or . } a', {. . . .   .   . (ix+D) .}	=> 76, DD, 80 + $1*8 + $2, D
[rabbit]	{add adc sub sbc and xor or . } a', N							=> 76,     C6 + $1*8, N

			{inc dec} {b c d e   h   l . a}	=>     04 + $1 + $2*8
[rabbit]	{inc dec} {b c d e   h   l . a}'=> 76, 04 + $1 + $2*8
[z80]		{inc dec} {. . . . ixh ixl . .}	=> DD, 04 + $1 + $2*8
[z80]		{inc dec} {. . . . iyh iyl . .}	=> FD, 04 + $1 + $2*8

			{inc dec} (hl)					=>     34 + $1
			{inc dec} (ix + D)				=> DD, 34 + $1, D
			{inc dec} (iy + D)				=> FD, 34 + $1, D

[z180]		tst a, {b c d e   h   l . a}	=> ED, 04 + $1*8
[z180]		tst    {b c d e   h   l . a}	=> ED, 04 + $1*8
[z180]		tst a, N						=> ED, 64, N
[z180]		tst    N						=> ED, 64, N
[z180]		tst a, (hl)						=> ED, 34
[z180]		tst    (hl)						=> ED, 34

;------------------------------------------------------------------------------
; General-Purpose Arithmetic Group
;------------------------------------------------------------------------------
[zilog]		daa					=>         27

			cpl					=>         2F
			cpl a				=>         2F
[rabbit]	cpl	a'				=>     76, 2F
                                       
			neg					=>     ED, 44
			neg a				=>     ED, 44
[rabbit]	neg a'				=> 76, ED, 44
			
			ccf					=>     3F
			ccf	f				=>     3F
[rabbit]	ccf	f'				=> 76, 3F
			
			scf					=>     37
			scf f				=>     37
[rabbit]	scf	f'				=> 76, 37

;------------------------------------------------------------------------------
; 16-bit load group
;------------------------------------------------------------------------------
			ld {bc de hl sp},  MN		=>     01 + $1*10, N, M
[rabbit]	ld {bc de hl . }', MN		=> 76, 01 + $1*10, N, M

			ld {.  .  ix . }, MN		=> DD, 01 + $1*10, N, M
			ld {.  .  iy . }, MN		=> FD, 01 + $1*10, N, M

			ld hl,  (MN)				=>     2A, N, M
[rabbit]	ld hl', (MN)				=> 76, 2A, N, M
			
			ld ix, (MN)					=> DD, 2A, N, M
			ld iy, (MN)					=> FD, 2A, N, M

			ld (MN), hl					=>     22, N, M
			ld (MN), ix					=> DD, 22, N, M
			ld (MN), iy					=> FD, 22, N, M

			ld {bc de . sp},  (MN)		=>     ED, 4B + $1*10, N, M
[rabbit]	ld {bc de . . }', (MN)		=> 76, ED, 4B + $1*10, N, M

			ld (MN), {bc de . sp}		=> ED, 43 + $1*10, N, M

			ld sp, hl					=>     F9
			ld sp, ix					=> DD, F9
			ld sp, iy					=> FD, F9

			push {bc de hl af}			=>     C5 + $1*10
			push {.  .  ix . }			=> DD, C5 + $1*10
			push {.  .  iy . }			=> FD, C5 + $1*10
[rabbit]	push ip						=> ED, 76
[r3k]		push su						=> ED, 66

			pop {bc de hl af}			=>     C1 + $1*10
[rabbit]	pop {bc de hl af}'			=> 76, C1 + $1*10
			pop {.  .  ix . }			=> DD, C1 + $1*10
			pop {.  .  iy . }			=> FD, C1 + $1*10
[rabbit]	pop ip						=> ED, 7E
[r3k]		pop su						=> ED, 6E

[rabbit]	ld hl,  ix					=>     DD, 7C
[rabbit]	ld hl', ix					=> 76, DD, 7C
[rabbit]	ld hl,  iy					=>     FD, 7C
[rabbit]	ld hl', iy					=> 76, FD, 7C

[rabbit]	ld ix, hl					=> DD, 7D
[rabbit]	ld iy, hl					=> FD, 7D

[rabbit]	ld hl,  (hl + D)			=>     DD, E4, D
[rabbit]	ld hl', (hl + D)			=> 76, DD, E4, D

[rabbit]	ld hl,  (ix + D)			=>         E4, D
[rabbit]	ld hl', (ix + D)			=> 76,     E4, D

[rabbit]	ld hl,  (iy + D)			=>     FD, E4, D
[rabbit]	ld hl', (iy + D)			=> 76, FD, E4, D

[rabbit]	ld (hl + D), hl				=> DD, F4, D
[rabbit]	ld (ix + D), hl				=>     F4, D
[rabbit]	ld (iy + D), hl				=> FD, F4, D

[rabbit]	ldp (MN), hl				=> ED, 65, N, M
[rabbit]	ldp (MN), ix				=> DD, 65, N, M
[rabbit]	ldp (MN), iy				=> FD, 65, N, M

[rabbit]	ldp hl, (MN)				=> ED, 6D, N, M
[rabbit]	ldp ix, (MN)				=> DD, 6D, N, M
[rabbit]	ldp iy, (MN)				=> FD, 6D, N, M

[rabbit]	ldp (hl), hl				=> ED, 64
[rabbit]	ldp (ix), hl				=> DD, 64
[rabbit]	ldp (iy), hl				=> FD, 64

[rabbit]	ldp hl, (hl)				=> ED, 6C
[rabbit]	ldp hl, (ix)				=> DD, 6C
[rabbit]	ldp hl, (iy)				=> FD, 6C

[rabbit]	ld (sp + N), hl				=>     D4, N
[rabbit]	ld (sp + N), ix				=> DD, D4, N
[rabbit]	ld (sp + N), iy				=> FD, D4, N

[rabbit]	ld hl,  (sp + N)				=>     C4, N
[rabbit]	ld hl', (sp + N)				=> 76, C4, N
[rabbit]	ld ix,  (sp + N)				=> DD, C4, N
[rabbit]	ld iy,  (sp + N)				=> FD, C4, N
	
[rabbit]	ld {bc de hl}', {bc de}		=> ED, 49 + $1*10 - $2*8

;------------------------------------------------------------------------------
; 16-Bit Arithmetic Group
;------------------------------------------------------------------------------
			add hl,  {bc de hl sp}		=>     09 + $1*10
[rabbit]	add hl', {bc de hl sp}		=> 76, 09 + $1*10

			add ix, {bc de ix sp}		=>     DD, 09 + $1*10
			add iy, {bc de iy sp}		=>     FD, 09 + $1*10
                                               
			{sbc adc} hl,  {bc de hl sp}=>     ED, 42 + $1*8 + $2*10
[rabbit]	{sbc adc} hl', {bc de hl sp}=> 76, ED, 42 + $1*8 + $2*10

			{inc dec} {bc de hl sp}		=>     03 + $1*8 + $2*10
[rabbit]	{inc dec} {bc de hl . }'	=> 76, 03 + $1*8 + $2*10
			{inc dec} {.  .  ix . }		=> DD, 03 + $1*8 + $2*10
			{inc dec} {.  .  iy . }		=> FD, 03 + $1*8 + $2*10
			
[rabbit]	add sp, D					=>     27, D

[rabbit]	{and or} hl,  de			=>         DC + $1*10
[rabbit]	{and or} hl', de			=> 76,     DC + $1*10

[rabbit]	{and or} ix,  de			=>     DD, DC + $1*10
[rabbit]	{and or} iy,  de			=>     FD, DC + $1*10

[rabbit]	bool hl						=>     CC
[rabbit]	bool hl'					=> 76, CC
[rabbit]	bool ix						=> DD, CC
[rabbit]	bool iy						=> FD, CC

[z180]		mlt {bc de hl sp}			=> ED, 4C + $1*10
[rabbit]	mul							=> F7

[r3k]		uma							=> ED, C0
[r3k]		ums							=> ED, C8

;------------------------------------------------------------------------------
; Exchange Group
;------------------------------------------------------------------------------
			ex af, {af af'}		=>     08
			exx					=>     D9
	
			ex (sp), hl			=> [zilog] ? (E3) : (ED, 54)
[rabbit]	ex (sp), hl'		=> 76, ED, 54

			ex (sp), ix			=> DD, E3
			ex (sp), iy			=> FD, E3
	
			ex de, hl			=>     EB
[rabbit]	ex de', hl 			=>     E3
[rabbit]	ex de,  hl'			=> 76, EB
[rabbit]	ex de', hl'			=> 76, E3

;------------------------------------------------------------------------------
; Rotate and Shift Group
;------------------------------------------------------------------------------
			{rlca rrca rla rra}											=>     07 + $1*8
	
			{rlc rrc rl rr sla sra .   srl} {b c d e h l (hl)   a}		=>     CB,    $1*8 + $2
[zilog]		{.   .   .  .  .   .   sll .  } {b c d e h l (hl)   a}		=>     CB,    $1*8 + $2
	
			{rlc rrc rl rr sla sra .   srl} {. . . . . . (ix+D) .}		=> DD, CB, D, $1*8 + $2
[zilog]		{.   .   .  .  .   .   sll .  } {. . . . . . (ix+D) .}		=> DD, CB, D, $1*8 + $2
	
			{rlc rrc rl rr sla sra .   srl} {. . . . . . (iy+D) .}		=> FD, CB, D, $1*8 + $2
[zilog]		{.   .   .  .  .   .   sll .  } {. . . . . . (iy+D) .}		=> FD, CB, D, $1*8 + $2

[rabbit]	rl de		=>     F3
[rabbit]	rr de		=>     FB
[rabbit]	rr hl		=>     FC

[rabbit]	rl de'		=> 76, F3
[rabbit]	rr de'		=> 76, FB
[rabbit]	rr hl'		=> 76, FC

[rabbit]	rr ix		=> DD, FC
[rabbit]	rr iy		=> FD, FC

;------------------------------------------------------------------------------
; Bit Set, Reset, and Test Group
;------------------------------------------------------------------------------
			{. bit res set} {0 1 2 3 4 5 6 7}, {b c d e h l (hl)   a}		=>     CB,    $1*40 + $2*8 + $3
[rabbit]	{. .   res set} {0 1 2 3 4 5 6 7}, {b c d e h l .      a}'		=> 76, CB,    $1*40 + $2*8 + $3
			{. bit res set} {0 1 2 3 4 5 6 7}, {. . . . . . (ix+D) .}		=> DD, CB, D, $1*40 + $2*8 + $3
			{. bit res set} {0 1 2 3 4 5 6 7}, {. . . . . . (iy+D) .}		=> FD, CB, D, $1*40 + $2*8 + $3
			
;------------------------------------------------------------------------------
; Block Transfer Group
;------------------------------------------------------------------------------
			ldi 				=> ED, A0
			ldir				=> ED, B0
			ldd 				=> ED, A8
			lddr				=> ED, B8

[r3k]		ldisr				=> ED, 90
[r3k]		lddsr				=> ED, 98

[r3k]		lsdr				=> ED, F8
[r3k]		lsir				=> ED, F0
[r3k]		lsddr				=> ED, D8
[r3k]		lsidr				=> ED, D0

;------------------------------------------------------------------------------
; Search Group
;------------------------------------------------------------------------------
; [zilog]		cpi 				=> ED, A1
; [zilog]		cpir				=> ED, B1
; [zilog]		cpd 				=> ED, A9
; [zilog]		cpdr				=> ED, B9

;------------------------------------------------------------------------------
; CPU Control Group
;------------------------------------------------------------------------------
			nop					=>     00
[zilog]		halt				=>     76
[z180]		slp					=> ED, 76
	
; TODO: add all ALTD combinations
[rabbit]	ld a,  xpc			=>     ED, 77
[rabbit]	ld a', xpc			=> 76, ED, 77
[rabbit]	ld xpc, a			=>     ED, 67

[r3k]		rdmode				=> ED, 7F
[r3k]		setusr				=> ED, 6F
[r3k]		sures				=> ED, 7D
[r3k]		syscall				=> ED, 75

;------------------------------------------------------------------------------
; Jump Group
;------------------------------------------------------------------------------
			jp MN							=> C3, N, M
			jp {nz z nc c po pe p m}, MN	=> C2 + $1*8, N, M
[rabbit]	jp {.  . .  . lz lo . .}, MN	=> C2 + $1*8, N, M

; TODO: LJP not supported

			jp (hl)							=>     E9
			jp (ix)							=> DD, E9
			jp (iy)							=> FD, E9
			
			djnz ASMPC						=>     10, FE
			djnz b,  ASMPC					=>     10, FE
[rabbit]	djnz b', ASMPC					=> 76, 10, FE

; TODO: check that address is corretly computed in DJNZ B', LABEL

			jr ASMPC						=> 18, FE
			jr {nz z nc c}, ASMPC			=> 20 + $1*8, FE

;------------------------------------------------------------------------------
; Call and Return Group
;------------------------------------------------------------------------------
			call MN							=> CD, N, M
;[zilog]		call {nz z nc c po pe p m}, MN	=> C4 + $1*8, N, M

; TODO: LCALL not supported

			ret								=> C9
			ret {nz z nc c po pe p m}		=> C0 + $1*8
[rabbit]	ret {.  . .  . lz lo . .}		=> C0 + $1*8

; TODO: LRET not supported

			rst {. . 16 24 32 40 .  56}		=> C7 + $1*8
;[zilog]		rst {0 8 .  .  .  .  48 . }		=> C7 + $1*8

;------------------------------------------------------------------------------
; Input and Output Group
;------------------------------------------------------------------------------
[zilog]		in  a, (N)						=>     DB, N
[zilog]		in  {b c d e h l f a}, (c)		=> ED, 40 + $1*8
[z180]		in0 {b c d e h l f a}, (N)		=> ED, 00 + $1*8, N

[zilog]		out  (N), a						=>     D3, N
[zilog]		out  (c), {b c d e h l 0 a}		=> ED, 41 + $1*8
[z180]		out0 (N), {b c d e h l . a}		=> ED, 01 + $1*8, N

[z180]		tstio N			=> ED, 74, N

[zilog]		ini				=> ED, A2
[zilog]		inir			=> ED, B2
[zilog]		ind				=> ED, AA
[zilog]		indr			=> ED, BA
	
[zilog]		outi			=> ED, A3
[zilog]		otir			=> ED, B3
[zilog]		outd			=> ED, AB
[zilog]		otdr			=> ED, BB

[z180]		otdm			=> ED, 8B
[z180]		otdmr			=> ED, 9B
[z180]		otim			=> ED, 83
[z180]		otimr			=> ED, 93

;------------------------------------------------------------------------------
; Interrupt control group
;------------------------------------------------------------------------------
[zilog]		di				=>     F3
[zilog]		ei				=>     FB
[zilog]		im 0			=> ED, 46
[zilog]		im 1			=> ED, 56
[zilog]		im 2			=> ED, 5E

[rabbit]	ipset 0			=> ED, 46
[rabbit]	ipset 1			=> ED, 56
[rabbit]	ipset 2			=> ED, 4E
[rabbit]	ipset 3			=> ED, 5E

[rabbit]	ipres			=> ED, 5D

[zilog]		ld i, a			=> ED, 47
[zilog]		ld a, i			=> ED, 57
[zilog]		ld r, a			=> ED, 4F
[zilog]		ld a, r			=> ED, 5F

[rabbit]	ld iir, a		=>     ED, 4F
[rabbit]	ld a,  iir		=>     ED, 5F
[rabbit]	ld a', iir		=> 76, ED, 5F
[rabbit]	ld eir, a		=>     ED, 47
[rabbit]	ld a,  eir		=>     ED, 57
[rabbit]	ld a', eir		=> 76, ED, 57

			reti			=> ED, 4D
[zilog]		retn			=> ED, 45
                               
[r3k]		idet			=>     5B
