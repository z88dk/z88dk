static const short _lexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	156, 1, 157, 1, 158, 1, 159, 1, 
	160, 1, 161, 1, 162, 1, 163, 1, 
	164, 1, 165, 1, 166, 1, 167, 1, 
	168, 1, 169, 1, 170, 1, 171, 1, 
	172, 1, 173, 1, 174, 1, 175, 1, 
	176, 1, 177, 1, 178, 1, 179, 1, 
	180, 1, 181, 1, 182, 1, 183, 1, 
	184, 1, 185, 1, 186, 1, 187, 1, 
	188, 1, 189, 1, 190, 1, 191, 1, 
	192, 1, 193, 1, 194, 1, 195, 1, 
	196, 1, 197, 1, 198, 1, 199, 1, 
	200, 1, 201, 1, 202, 1, 203, 1, 
	204, 1, 205, 1, 206, 1, 207, 1, 
	208, 1, 209, 1, 210, 1, 211, 1, 
	212, 1, 213, 1, 214, 1, 215, 1, 
	216, 1, 217, 1, 218, 1, 219, 1, 
	220, 1, 221, 1, 222, 1, 223, 1, 
	224, 1, 225, 1, 226, 1, 227, 1, 
	228, 1, 229, 1, 230, 1, 231, 1, 
	232, 1, 233, 1, 234, 1, 235, 1, 
	236, 1, 237, 1, 238, 1, 239, 1, 
	240, 1, 241, 1, 242, 1, 243, 1, 
	244, 1, 245, 1, 246, 1, 247, 1, 
	248, 1, 249, 1, 250, 1, 251, 1, 
	252, 1, 253, 1, 254, 1, 255, 1, 
	256, 1, 257, 1, 258, 1, 259, 1, 
	260, 1, 261, 1, 262, 1, 263, 1, 
	264, 1, 265, 2, 2, 3, 2, 2, 
	4, 2, 2, 5, 2, 2, 6, 2, 
	2, 7, 2, 2, 8, 2, 2, 9, 
	2, 2, 10, 2, 2, 11, 2, 2, 
	12, 2, 2, 13, 2, 2, 14, 2, 
	2, 15, 2, 2, 16, 2, 2, 17, 
	2, 2, 18, 2, 2, 19, 2, 2, 
	20, 2, 2, 21, 2, 2, 22, 2, 
	2, 23, 2, 2, 24, 2, 2, 25, 
	2, 2, 26, 2, 2, 27, 2, 2, 
	28, 2, 2, 29, 2, 2, 30, 2, 
	2, 31, 2, 2, 32, 2, 2, 33, 
	2, 2, 34, 2, 2, 35, 2, 2, 
	36, 2, 2, 37, 2, 2, 38, 2, 
	2, 39, 2, 2, 40, 2, 2, 41, 
	2, 2, 42, 2, 2, 43, 2, 2, 
	44, 2, 2, 45, 2, 2, 46, 2, 
	2, 47, 2, 2, 48, 2, 2, 49, 
	2, 2, 50, 2, 2, 51, 2, 2, 
	52, 2, 2, 53, 2, 2, 54, 2, 
	2, 55, 2, 2, 56, 2, 2, 57, 
	2, 2, 58, 2, 2, 59, 2, 2, 
	60, 2, 2, 61, 2, 2, 62, 2, 
	2, 63, 2, 2, 64, 2, 2, 65, 
	2, 2, 66, 2, 2, 67, 2, 2, 
	68, 2, 2, 69, 2, 2, 70, 2, 
	2, 71, 2, 2, 72, 2, 2, 73, 
	2, 2, 74, 2, 2, 75, 2, 2, 
	76, 2, 2, 77, 2, 2, 78, 2, 
	2, 79, 2, 2, 80, 2, 2, 81, 
	2, 2, 82, 2, 2, 83, 2, 2, 
	84, 2, 2, 85, 2, 2, 86, 2, 
	2, 87, 2, 2, 88, 2, 2, 89, 
	2, 2, 90, 2, 2, 91, 2, 2, 
	92, 2, 2, 93, 2, 2, 94, 2, 
	2, 95, 2, 2, 96, 2, 2, 97, 
	2, 2, 98, 2, 2, 99, 2, 2, 
	100, 2, 2, 101, 2, 2, 102, 2, 
	2, 103, 2, 2, 104, 2, 2, 105, 
	2, 2, 106, 2, 2, 107, 2, 2, 
	108, 2, 2, 109, 2, 2, 110, 2, 
	2, 111, 2, 2, 112, 2, 2, 113, 
	2, 2, 114, 2, 2, 115, 2, 2, 
	116, 2, 2, 117, 2, 2, 118, 2, 
	2, 119, 2, 2, 120, 2, 2, 121, 
	2, 2, 122, 2, 2, 123, 2, 2, 
	124, 2, 2, 125, 2, 2, 126, 2, 
	2, 127, 2, 2, 128, 2, 2, 129, 
	2, 2, 130, 2, 2, 131, 2, 2, 
	132, 2, 2, 133, 2, 2, 134, 2, 
	2, 135, 2, 2, 136, 2, 2, 137, 
	2, 2, 138, 2, 2, 139, 2, 2, 
	140, 2, 2, 141, 2, 2, 142, 2, 
	2, 143, 2, 2, 144, 2, 2, 145, 
	2, 2, 146, 2, 2, 147, 2, 2, 
	148, 2, 2, 149, 2, 2, 150, 2, 
	2, 151, 2, 2, 152, 2, 2, 153, 
	2, 2, 154, 2, 2, 155
};
static const short _lexer_cond_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 8, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 17, 21, 28, 35, 42, 49, 56, 
	63, 70, 77, 84, 91, 98, 105, 112, 
	119, 126, 133, 140, 147, 154, 161, 168, 
	175, 182, 189, 196, 203, 210, 217, 224, 
	231, 238, 245, 252, 259, 266, 273, 280, 
	287, 294, 301, 308, 315, 322, 329, 336, 
	343, 350, 357, 364, 371, 378, 385, 392, 
	399, 406, 413, 420, 427, 434, 441, 448, 
	455, 462, 469, 476, 483, 490, 497, 504, 
	511, 518, 525, 532, 539, 546, 553, 560, 
	567, 574, 581, 588, 595, 602, 609, 616, 
	623, 630, 637, 644, 651, 658, 665, 672, 
	679, 686, 693, 700, 707, 714, 721, 728, 
	735, 742, 749, 756, 763, 770, 777, 784, 
	791, 798, 805, 812, 819, 826, 833, 840, 
	847, 854, 861, 868, 875, 882, 889, 896, 
	903, 910, 917, 924, 931, 938, 945, 952, 
	959, 966, 973, 980, 987, 994, 1001, 1008, 
	1015, 1022, 1029, 1036, 1043, 1050, 1057, 1064, 
	1071, 1078, 1085, 1092, 1099, 1106, 1113, 1120, 
	1127, 1134
};
static const char _lexer_cond_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 3, 4, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	5, 4, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7
};
static const short _lexer_cond_keys[] = {
	9, 9, 32, 32, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 58, 58, 
	46, 46, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 65, 90, 95, 95, 
	97, 122, 48, 57, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 0
};
static const char _lexer_cond_spaces[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
};
static const short _lexer_key_offsets[] = {
	0, 0, 2, 5, 19, 21, 24, 27, 
	29, 32, 34, 37, 41, 46, 51, 53, 
	56, 64, 70, 78, 85, 88, 222, 223, 
	229, 232, 234, 235, 249, 250, 264, 276, 
	284, 292, 302, 308, 309, 312, 313, 315, 
	316, 331, 338, 349, 357, 366, 375, 384, 
	393, 404, 415, 424, 433, 442, 455, 464, 
	473, 480, 491, 500, 509, 518, 527, 540, 
	549, 558, 575, 584, 595, 620, 629, 638, 
	647, 656, 665, 674, 683, 692, 701, 710, 
	719, 727, 742, 751, 760, 769, 778, 787, 
	796, 807, 816, 825, 834, 843, 852, 861, 
	870, 879, 888, 897, 908, 917, 926, 945, 
	956, 965, 974, 983, 992, 1001, 1010, 1026, 
	1035, 1044, 1053, 1062, 1071, 1080, 1089, 1098, 
	1107, 1118, 1129, 1140, 1153, 1164, 1175, 1184, 
	1195, 1204, 1213, 1222, 1231, 1240, 1251, 1260, 
	1273, 1282, 1291, 1300, 1309, 1318, 1327, 1342, 
	1351, 1360, 1373, 1382, 1393, 1404, 1413, 1424, 
	1433, 1442, 1454, 1463, 1472, 1485, 1494, 1505, 
	1514, 1523, 1532, 1541, 1556, 1567, 1578, 1591, 
	1600, 1613, 1622, 1631, 1654, 1663, 1672, 1683, 
	1692, 1701, 1710, 1719, 1732, 1743, 1752, 1761, 
	1770, 1779, 1788, 1797, 1806, 1815, 1824, 1833, 
	1842, 1851, 1860, 1869, 1878, 1887, 1896, 1905, 
	1914, 1921, 1928, 1961, 1978, 2003, 2021, 2042, 
	2063, 2084, 2105, 2130, 2155, 2176, 2197, 2218, 
	2247, 2268, 2289, 2306, 2331, 2352, 2373, 2394, 
	2415, 2444, 2465, 2486, 2523, 2544, 2569, 2622, 
	2643, 2664, 2685, 2706, 2727, 2748, 2769, 2790, 
	2811, 2832, 2853, 2871, 2904, 2925, 2946, 2967, 
	2988, 3009, 3030, 3055, 3076, 3097, 3118, 3139, 
	3160, 3181, 3202, 3223, 3244, 3265, 3290, 3311, 
	3332, 3373, 3398, 3419, 3440, 3461, 3482, 3503, 
	3524, 3559, 3580, 3601, 3622, 3643, 3664, 3685, 
	3706, 3727, 3748, 3773, 3798, 3823, 3852, 3877, 
	3902, 3923, 3948, 3969, 3990, 4011, 4032, 4053, 
	4078, 4099, 4128, 4149, 4170, 4191, 4212, 4233, 
	4254, 4287, 4308, 4329, 4358, 4379, 4404, 4429, 
	4450, 4475, 4496, 4517, 4544, 4565, 4586, 4615, 
	4636, 4661, 4682, 4703, 4724, 4745, 4778, 4803, 
	4828, 4857, 4878, 4907, 4928, 4949, 4998, 5019, 
	5040, 5065, 5086, 5107, 5128, 5149, 5178, 5203, 
	5224, 5245, 5266, 5287, 5308, 5329, 5350, 5371, 
	5392, 5413, 5434, 5455, 5476, 5497, 5518, 5539, 
	5560, 5581
};
static const short _lexer_trans_keys[] = {
	35, 45, 34, 35, 45, 9, 32, 66, 
	67, 68, 72, 73, 83, 98, 99, 100, 
	104, 105, 115, 67, 99, 9, 32, 41, 
	9, 32, 41, 69, 101, 9, 32, 41, 
	76, 108, 9, 32, 41, 88, 89, 120, 
	121, 9, 32, 41, 43, 45, 9, 32, 
	41, 43, 45, 80, 112, 9, 32, 41, 
	72, 104, 48, 57, 65, 70, 97, 102, 
	48, 57, 65, 70, 97, 102, 66, 80, 
	81, 87, 98, 112, 113, 119, 521, 544, 
	607, 577, 602, 609, 634, 521, 544, 570, 
	10, 33, 34, 35, 36, 37, 38, 39, 
	40, 41, 42, 43, 44, 45, 47, 48, 
	49, 58, 59, 60, 61, 62, 63, 64, 
	91, 92, 93, 94, 96, 123, 124, 125, 
	126, 127, 302, 321, 322, 323, 324, 325, 
	326, 327, 328, 329, 330, 332, 333, 334, 
	335, 336, 338, 339, 340, 341, 344, 346, 
	351, 353, 354, 355, 356, 357, 358, 359, 
	360, 361, 362, 364, 365, 366, 367, 368, 
	370, 371, 372, 373, 376, 378, 558, 577, 
	578, 579, 580, 581, 582, 583, 584, 585, 
	586, 588, 589, 590, 591, 592, 594, 595, 
	596, 597, 600, 602, 607, 609, 610, 611, 
	612, 613, 614, 615, 616, 617, 618, 620, 
	621, 622, 623, 624, 626, 627, 628, 629, 
	632, 634, -128, 32, 50, 57, 331, 345, 
	363, 377, 587, 601, 619, 633, 61, 48, 
	57, 65, 70, 97, 102, 34, 48, 49, 
	48, 49, 38, 9, 32, 66, 67, 68, 
	72, 73, 83, 98, 99, 100, 104, 105, 
	115, 42, 66, 72, 88, 98, 104, 120, 
	48, 49, 50, 57, 65, 70, 97, 102, 
	66, 72, 98, 104, 48, 49, 50, 57, 
	65, 70, 97, 102, 72, 104, 48, 57, 
	65, 70, 97, 102, 72, 104, 48, 57, 
	65, 70, 97, 102, 72, 104, 48, 49, 
	50, 57, 65, 70, 97, 102, 48, 57, 
	65, 70, 97, 102, 10, 60, 61, 62, 
	61, 61, 62, 124, 68, 70, 78, 83, 
	95, 100, 102, 110, 115, 48, 57, 65, 
	90, 97, 122, 95, 48, 57, 65, 90, 
	97, 122, 67, 68, 95, 99, 100, 48, 
	57, 65, 90, 97, 122, 39, 95, 48, 
	57, 65, 90, 97, 122, 68, 95, 100, 
	48, 57, 65, 90, 97, 122, 77, 95, 
	109, 48, 57, 65, 90, 97, 122, 80, 
	95, 112, 48, 57, 65, 90, 97, 122, 
	67, 95, 99, 48, 57, 65, 90, 97, 
	122, 67, 73, 95, 99, 105, 48, 57, 
	65, 90, 97, 122, 78, 84, 95, 110, 
	116, 48, 57, 65, 90, 97, 122, 65, 
	95, 97, 48, 57, 66, 90, 98, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 89, 95, 121, 48, 57, 65, 90, 
	97, 122, 65, 67, 80, 95, 97, 99, 
	112, 48, 57, 66, 90, 98, 122, 76, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	76, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 48, 57, 65, 90, 97, 122, 
	79, 80, 95, 111, 112, 48, 57, 65, 
	90, 97, 122, 90, 95, 122, 48, 57, 
	65, 89, 97, 121, 75, 95, 107, 48, 
	57, 65, 90, 97, 122, 71, 95, 103, 
	48, 57, 65, 90, 97, 122, 70, 95, 
	102, 48, 57, 65, 90, 97, 122, 68, 
	73, 76, 95, 100, 105, 108, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 82, 95, 114, 
	48, 57, 65, 90, 97, 122, 65, 69, 
	73, 74, 83, 95, 97, 101, 105, 106, 
	115, 48, 57, 66, 90, 98, 122, 65, 
	95, 97, 48, 57, 66, 90, 98, 122, 
	67, 70, 95, 99, 102, 48, 57, 65, 
	90, 97, 122, 66, 67, 71, 73, 77, 
	81, 83, 86, 87, 95, 98, 99, 103, 
	105, 109, 113, 115, 118, 119, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 79, 95, 111, 
	48, 57, 65, 90, 97, 122, 85, 95, 
	117, 48, 57, 65, 90, 97, 122, 80, 
	95, 112, 48, 57, 65, 90, 97, 122, 
	78, 95, 110, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 65, 95, 97, 48, 57, 66, 
	90, 98, 122, 82, 95, 114, 48, 57, 
	65, 90, 97, 122, 83, 95, 115, 48, 
	57, 65, 90, 97, 122, 78, 95, 110, 
	48, 57, 65, 90, 97, 122, 90, 95, 
	122, 48, 57, 65, 89, 97, 121, 46, 
	95, 48, 57, 65, 90, 97, 122, 73, 
	76, 78, 88, 95, 105, 108, 110, 120, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 83, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	69, 95, 101, 48, 57, 65, 90, 97, 
	122, 68, 95, 100, 48, 57, 65, 90, 
	97, 122, 73, 95, 105, 48, 57, 65, 
	90, 97, 122, 70, 95, 102, 48, 57, 
	65, 90, 97, 122, 84, 88, 95, 116, 
	120, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 78, 95, 110, 48, 57, 65, 90, 
	97, 122, 80, 95, 112, 48, 57, 65, 
	90, 97, 122, 80, 95, 112, 48, 57, 
	65, 90, 97, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 79, 95, 111, 
	48, 57, 65, 90, 97, 122, 66, 95, 
	98, 48, 57, 65, 90, 97, 122, 65, 
	95, 97, 48, 57, 66, 90, 98, 122, 
	76, 95, 108, 48, 57, 65, 90, 97, 
	122, 65, 76, 95, 97, 108, 48, 57, 
	66, 90, 98, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 84, 95, 116, 
	48, 57, 65, 90, 97, 122, 70, 73, 
	77, 78, 88, 89, 95, 102, 105, 109, 
	110, 120, 121, 48, 57, 65, 90, 97, 
	122, 68, 78, 95, 100, 110, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 70, 95, 102, 
	48, 57, 65, 90, 97, 122, 68, 95, 
	100, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	70, 95, 102, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 48, 67, 68, 73, 86, 95, 
	99, 100, 105, 118, 49, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 85, 95, 117, 48, 57, 
	65, 90, 97, 122, 68, 95, 100, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	79, 95, 111, 48, 57, 65, 90, 97, 
	122, 75, 95, 107, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 72, 76, 95, 104, 108, 
	48, 57, 65, 90, 97, 122, 72, 76, 
	95, 104, 108, 48, 57, 65, 90, 97, 
	122, 80, 82, 95, 112, 114, 48, 57, 
	65, 90, 97, 122, 68, 73, 83, 95, 
	100, 105, 115, 48, 57, 65, 90, 97, 
	122, 68, 73, 95, 100, 105, 48, 57, 
	65, 90, 97, 122, 82, 88, 95, 114, 
	120, 48, 57, 65, 90, 97, 122, 88, 
	95, 120, 48, 57, 65, 90, 97, 122, 
	82, 88, 95, 114, 120, 48, 57, 65, 
	90, 97, 122, 88, 95, 120, 48, 57, 
	65, 90, 97, 122, 78, 95, 110, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 84, 95, 
	116, 48, 57, 65, 90, 97, 122, 79, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	70, 78, 95, 102, 110, 48, 57, 65, 
	90, 97, 122, 70, 95, 102, 48, 57, 
	65, 90, 97, 122, 76, 79, 85, 95, 
	108, 111, 117, 48, 57, 65, 90, 97, 
	122, 84, 95, 116, 48, 57, 65, 90, 
	97, 122, 68, 95, 100, 48, 57, 65, 
	90, 97, 122, 85, 95, 117, 48, 57, 
	65, 90, 97, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 76, 95, 
	108, 48, 57, 65, 90, 97, 122, 67, 
	69, 79, 90, 95, 99, 101, 111, 122, 
	48, 57, 65, 89, 97, 121, 71, 95, 
	103, 48, 57, 65, 90, 97, 122, 80, 
	95, 112, 48, 57, 65, 90, 97, 122, 
	82, 84, 85, 95, 114, 116, 117, 48, 
	57, 65, 90, 97, 122, 71, 95, 103, 
	48, 57, 65, 90, 97, 122, 68, 73, 
	95, 100, 105, 48, 57, 65, 90, 97, 
	122, 77, 82, 95, 109, 114, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 77, 82, 95, 
	109, 114, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 84, 95, 116, 48, 57, 65, 90, 
	97, 122, 48, 68, 73, 95, 100, 105, 
	49, 57, 65, 90, 97, 122, 78, 95, 
	110, 48, 57, 65, 90, 97, 122, 66, 
	95, 98, 48, 57, 65, 90, 97, 122, 
	69, 79, 85, 95, 101, 111, 117, 48, 
	57, 65, 90, 97, 122, 80, 95, 112, 
	48, 57, 65, 90, 97, 122, 66, 83, 
	95, 98, 115, 48, 57, 65, 90, 97, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 73, 95, 105, 48, 57, 65, 
	90, 97, 122, 67, 95, 99, 48, 57, 
	65, 90, 97, 122, 72, 95, 104, 48, 
	57, 65, 90, 97, 122, 69, 76, 82, 
	83, 95, 101, 108, 114, 115, 48, 57, 
	65, 90, 97, 122, 83, 84, 95, 115, 
	116, 48, 57, 65, 90, 97, 122, 73, 
	78, 95, 105, 110, 48, 57, 65, 90, 
	97, 122, 65, 67, 68, 95, 97, 99, 
	100, 48, 57, 66, 90, 98, 122, 65, 
	95, 97, 48, 57, 66, 90, 98, 122, 
	65, 67, 68, 95, 97, 99, 100, 48, 
	57, 66, 90, 98, 122, 65, 95, 97, 
	48, 57, 66, 90, 98, 122, 84, 95, 
	116, 48, 57, 65, 90, 97, 122, 66, 
	67, 69, 76, 80, 82, 85, 87, 95, 
	98, 99, 101, 108, 112, 114, 117, 119, 
	48, 57, 65, 90, 97, 122, 67, 95, 
	99, 48, 57, 65, 90, 97, 122, 70, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	67, 84, 95, 99, 116, 48, 57, 65, 
	90, 97, 122, 84, 95, 116, 48, 57, 
	65, 90, 97, 122, 73, 95, 105, 48, 
	57, 65, 90, 97, 122, 79, 95, 111, 
	48, 57, 65, 90, 97, 122, 78, 95, 
	110, 48, 57, 65, 90, 97, 122, 65, 
	76, 80, 95, 97, 108, 112, 48, 57, 
	66, 90, 98, 122, 65, 76, 95, 97, 
	108, 48, 57, 66, 90, 98, 122, 66, 
	95, 98, 48, 57, 65, 90, 97, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 80, 95, 112, 48, 57, 65, 90, 
	97, 122, 78, 95, 110, 48, 57, 65, 
	90, 97, 122, 73, 95, 105, 48, 57, 
	65, 90, 97, 122, 66, 95, 98, 48, 
	57, 65, 90, 97, 122, 83, 95, 115, 
	48, 57, 65, 90, 97, 122, 84, 95, 
	116, 48, 57, 65, 90, 97, 122, 73, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	79, 95, 111, 48, 57, 65, 90, 97, 
	122, 78, 95, 110, 48, 57, 65, 90, 
	97, 122, 68, 95, 100, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 70, 95, 102, 48, 
	57, 65, 90, 97, 122, 73, 95, 105, 
	48, 57, 65, 90, 97, 122, 78, 95, 
	110, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	79, 95, 111, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 521, 544, 607, 577, 602, 609, 
	634, 607, 560, 569, 577, 602, 609, 634, 
	324, 326, 334, 339, 351, 356, 358, 366, 
	371, 521, 544, 570, 580, 582, 590, 595, 
	607, 612, 614, 622, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 351, 521, 544, 570, 607, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 323, 324, 351, 355, 356, 521, 
	544, 570, 579, 580, 607, 611, 612, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 39, 351, 521, 544, 570, 
	607, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 351, 356, 
	521, 544, 570, 580, 607, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 333, 351, 365, 521, 544, 570, 
	589, 607, 621, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 336, 
	351, 368, 521, 544, 570, 592, 607, 624, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 323, 351, 355, 521, 
	544, 570, 579, 607, 611, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 323, 329, 351, 355, 361, 521, 544, 
	570, 579, 585, 607, 611, 617, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 334, 340, 351, 366, 372, 521, 
	544, 570, 590, 596, 607, 622, 628, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 321, 351, 353, 521, 544, 
	570, 577, 607, 609, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 345, 351, 377, 
	521, 544, 570, 601, 607, 633, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 321, 323, 336, 351, 353, 355, 
	368, 521, 544, 570, 577, 579, 592, 607, 
	609, 611, 624, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 332, 
	351, 364, 521, 544, 570, 588, 607, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 332, 351, 364, 521, 
	544, 570, 588, 607, 620, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 351, 521, 544, 570, 607, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 335, 336, 351, 367, 368, 521, 
	544, 570, 591, 592, 607, 623, 624, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 346, 351, 378, 521, 544, 
	570, 602, 607, 634, 304, 313, 321, 345, 
	353, 377, 560, 569, 577, 601, 609, 633, 
	331, 351, 363, 521, 544, 570, 587, 607, 
	619, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 327, 351, 359, 
	521, 544, 570, 583, 607, 615, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 326, 351, 358, 521, 544, 570, 
	582, 607, 614, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 324, 
	329, 332, 351, 356, 361, 364, 521, 544, 
	570, 580, 585, 588, 607, 612, 617, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 351, 370, 521, 
	544, 570, 594, 607, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 325, 
	329, 330, 339, 351, 353, 357, 361, 362, 
	371, 521, 544, 570, 577, 581, 585, 586, 
	595, 607, 609, 613, 617, 618, 627, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 321, 351, 353, 521, 544, 
	570, 577, 607, 609, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	323, 326, 351, 355, 358, 521, 544, 570, 
	579, 582, 607, 611, 614, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 322, 323, 327, 329, 333, 337, 339, 
	342, 343, 351, 354, 355, 359, 361, 365, 
	369, 371, 374, 375, 521, 544, 570, 578, 
	579, 583, 585, 589, 593, 595, 598, 599, 
	607, 610, 611, 615, 617, 621, 625, 627, 
	630, 631, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 338, 351, 
	370, 521, 544, 570, 594, 607, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 335, 351, 367, 521, 544, 
	570, 591, 607, 623, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	341, 351, 373, 521, 544, 570, 597, 607, 
	629, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 336, 351, 368, 
	521, 544, 570, 592, 607, 624, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 334, 351, 366, 521, 544, 570, 
	590, 607, 622, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 321, 351, 353, 521, 
	544, 570, 577, 607, 609, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 339, 351, 
	371, 521, 544, 570, 595, 607, 627, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 334, 351, 366, 521, 544, 
	570, 590, 607, 622, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	346, 351, 378, 521, 544, 570, 602, 607, 
	634, 304, 313, 321, 345, 353, 377, 560, 
	569, 577, 601, 609, 633, 46, 351, 521, 
	544, 570, 607, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 329, 
	332, 334, 344, 351, 361, 364, 366, 376, 
	521, 544, 570, 585, 588, 590, 600, 607, 
	617, 620, 622, 632, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 339, 351, 371, 
	521, 544, 570, 595, 607, 627, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 324, 
	351, 356, 521, 544, 570, 580, 607, 612, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 329, 351, 361, 521, 
	544, 570, 585, 607, 617, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 326, 351, 358, 521, 544, 570, 582, 
	607, 614, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 340, 344, 
	351, 372, 376, 521, 544, 570, 596, 600, 
	607, 628, 632, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 351, 370, 521, 
	544, 570, 594, 607, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 334, 351, 366, 521, 544, 570, 590, 
	607, 622, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 336, 351, 
	368, 521, 544, 570, 592, 607, 624, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 336, 351, 368, 521, 544, 
	570, 592, 607, 624, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 335, 351, 367, 
	521, 544, 570, 591, 607, 623, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 322, 351, 354, 521, 544, 570, 
	578, 607, 610, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 321, 
	351, 353, 521, 544, 570, 577, 607, 609, 
	304, 313, 322, 346, 354, 378, 560, 569, 
	578, 602, 610, 634, 332, 351, 364, 521, 
	544, 570, 588, 607, 620, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 321, 332, 351, 353, 364, 521, 544, 
	570, 577, 588, 607, 609, 620, 304, 313, 
	322, 346, 354, 378, 560, 569, 578, 602, 
	610, 634, 332, 351, 364, 521, 544, 570, 
	588, 607, 620, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 340, 
	351, 372, 521, 544, 570, 596, 607, 628, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 326, 329, 333, 334, 
	344, 345, 351, 358, 361, 365, 366, 376, 
	377, 521, 544, 570, 582, 585, 589, 590, 
	600, 601, 607, 614, 617, 621, 622, 632, 
	633, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 334, 351, 
	356, 366, 521, 544, 570, 580, 590, 607, 
	612, 622, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 326, 351, 358, 521, 544, 
	570, 582, 607, 614, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	324, 351, 356, 521, 544, 570, 580, 607, 
	612, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 351, 357, 
	521, 544, 570, 581, 607, 613, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 326, 351, 358, 521, 544, 570, 
	582, 607, 614, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 304, 323, 324, 329, 
	342, 351, 355, 356, 361, 374, 521, 544, 
	560, 570, 579, 580, 585, 598, 607, 611, 
	612, 617, 630, 305, 313, 321, 346, 353, 
	378, 561, 569, 577, 602, 609, 634, 332, 
	351, 364, 521, 544, 570, 588, 607, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 341, 351, 373, 521, 
	544, 570, 597, 607, 629, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 324, 351, 356, 521, 544, 570, 580, 
	607, 612, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 335, 351, 367, 
	521, 544, 570, 591, 607, 623, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 331, 351, 363, 521, 544, 570, 
	587, 607, 619, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 328, 332, 351, 360, 
	364, 521, 544, 570, 584, 588, 607, 616, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 328, 332, 351, 
	360, 364, 521, 544, 570, 584, 588, 607, 
	616, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 336, 338, 
	351, 368, 370, 521, 544, 570, 592, 594, 
	607, 624, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 324, 
	329, 339, 351, 356, 361, 371, 521, 544, 
	570, 580, 585, 595, 607, 612, 617, 627, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 324, 329, 351, 356, 
	361, 521, 544, 570, 580, 585, 607, 612, 
	617, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 344, 351, 
	370, 376, 521, 544, 570, 594, 600, 607, 
	626, 632, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 344, 351, 
	376, 521, 544, 570, 600, 607, 632, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 344, 351, 370, 376, 
	521, 544, 570, 594, 600, 607, 626, 632, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 344, 351, 376, 521, 
	544, 570, 600, 607, 632, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 334, 351, 366, 521, 544, 570, 590, 
	607, 622, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 340, 351, 372, 521, 544, 
	570, 596, 607, 628, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	335, 351, 367, 521, 544, 570, 591, 607, 
	623, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 326, 334, 351, 
	358, 366, 521, 544, 570, 582, 590, 607, 
	614, 622, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 326, 351, 
	358, 521, 544, 570, 582, 607, 614, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 332, 335, 341, 351, 364, 
	367, 373, 521, 544, 570, 588, 591, 597, 
	607, 620, 623, 629, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	340, 351, 372, 521, 544, 570, 596, 607, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 351, 356, 
	521, 544, 570, 580, 607, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 341, 351, 373, 521, 544, 570, 
	597, 607, 629, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 332, 
	351, 364, 521, 544, 570, 588, 607, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 325, 351, 357, 521, 
	544, 570, 581, 607, 613, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 332, 351, 364, 521, 544, 570, 588, 
	607, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 323, 325, 
	335, 346, 351, 355, 357, 367, 378, 521, 
	544, 570, 579, 581, 591, 602, 607, 611, 
	613, 623, 634, 304, 313, 321, 345, 353, 
	377, 560, 569, 577, 601, 609, 633, 327, 
	351, 359, 521, 544, 570, 583, 607, 615, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 336, 351, 368, 521, 
	544, 570, 592, 607, 624, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 340, 341, 351, 370, 372, 373, 
	521, 544, 570, 594, 596, 597, 607, 626, 
	628, 629, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 327, 351, 
	359, 521, 544, 570, 583, 607, 615, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 324, 329, 351, 356, 361, 
	521, 544, 570, 580, 585, 607, 612, 617, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 333, 338, 351, 365, 
	370, 521, 544, 570, 589, 594, 607, 621, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 333, 338, 351, 365, 370, 521, 
	544, 570, 589, 594, 607, 621, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	340, 351, 372, 521, 544, 570, 596, 607, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 304, 324, 329, 
	351, 356, 361, 521, 544, 560, 570, 580, 
	585, 607, 612, 617, 305, 313, 321, 346, 
	353, 378, 561, 569, 577, 602, 609, 634, 
	334, 351, 366, 521, 544, 570, 590, 607, 
	622, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 322, 351, 354, 
	521, 544, 570, 578, 607, 610, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 335, 341, 351, 357, 367, 
	373, 521, 544, 570, 581, 591, 597, 607, 
	613, 623, 629, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 336, 
	351, 368, 521, 544, 570, 592, 607, 624, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 322, 339, 351, 354, 
	371, 521, 544, 570, 578, 595, 607, 610, 
	627, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 332, 351, 364, 
	521, 544, 570, 588, 607, 620, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 329, 351, 361, 521, 544, 570, 
	585, 607, 617, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 323, 
	351, 355, 521, 544, 570, 579, 607, 611, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 328, 351, 360, 521, 
	544, 570, 584, 607, 616, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 325, 332, 338, 339, 351, 357, 364, 
	370, 371, 521, 544, 570, 581, 588, 594, 
	595, 607, 613, 620, 626, 627, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 339, 340, 351, 371, 372, 521, 
	544, 570, 595, 596, 607, 627, 628, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 329, 334, 351, 361, 366, 
	521, 544, 570, 585, 590, 607, 617, 622, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 321, 323, 324, 351, 
	353, 355, 356, 521, 544, 570, 577, 579, 
	580, 607, 609, 611, 612, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 321, 351, 353, 521, 544, 570, 577, 
	607, 609, 304, 313, 322, 346, 354, 378, 
	560, 569, 578, 602, 610, 634, 321, 323, 
	324, 351, 353, 355, 356, 521, 544, 570, 
	577, 579, 580, 607, 609, 611, 612, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 321, 351, 353, 521, 544, 
	570, 577, 607, 609, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	340, 351, 372, 521, 544, 570, 596, 607, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 322, 323, 325, 
	332, 336, 338, 341, 343, 351, 354, 355, 
	357, 364, 368, 370, 373, 375, 521, 544, 
	570, 578, 579, 581, 588, 592, 594, 597, 
	599, 607, 610, 611, 613, 620, 624, 626, 
	629, 631, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 323, 351, 
	355, 521, 544, 570, 579, 607, 611, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 326, 351, 358, 521, 544, 
	570, 582, 607, 614, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	323, 340, 351, 355, 372, 521, 544, 570, 
	579, 596, 607, 611, 628, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 340, 351, 372, 521, 544, 570, 596, 
	607, 628, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 329, 351, 
	361, 521, 544, 570, 585, 607, 617, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 335, 351, 367, 521, 544, 
	570, 591, 607, 623, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	334, 351, 366, 521, 544, 570, 590, 607, 
	622, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 321, 332, 336, 
	351, 353, 364, 368, 521, 544, 570, 577, 
	588, 592, 607, 609, 620, 624, 304, 313, 
	322, 346, 354, 378, 560, 569, 578, 602, 
	610, 634, 321, 332, 351, 353, 364, 521, 
	544, 570, 577, 588, 607, 609, 620, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 322, 351, 354, 521, 544, 
	570, 578, 607, 610, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	321, 351, 353, 521, 544, 570, 577, 607, 
	609, 304, 313, 322, 346, 354, 378, 560, 
	569, 578, 602, 610, 634, 336, 351, 368, 
	521, 544, 570, 592, 607, 624, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 334, 351, 366, 521, 544, 570, 
	590, 607, 622, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 329, 
	351, 361, 521, 544, 570, 585, 607, 617, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 322, 351, 354, 521, 
	544, 570, 578, 607, 610, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 339, 351, 371, 521, 544, 570, 595, 
	607, 627, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 340, 351, 
	372, 521, 544, 570, 596, 607, 628, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 329, 351, 361, 521, 544, 
	570, 585, 607, 617, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	335, 351, 367, 521, 544, 570, 591, 607, 
	623, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 334, 351, 366, 
	521, 544, 570, 590, 607, 622, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 324, 351, 356, 521, 544, 570, 
	580, 607, 612, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 326, 351, 358, 521, 
	544, 570, 582, 607, 614, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 329, 351, 361, 521, 544, 570, 585, 
	607, 617, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 334, 351, 
	366, 521, 544, 570, 590, 607, 622, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 325, 351, 357, 521, 544, 
	570, 581, 607, 613, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	335, 351, 367, 521, 544, 570, 591, 607, 
	623, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 0
};
static const char _lexer_single_lengths[] = {
	0, 2, 3, 14, 2, 3, 3, 2, 
	3, 2, 3, 4, 5, 5, 2, 3, 
	2, 0, 8, 3, 3, 122, 1, 0, 
	1, 0, 1, 14, 1, 6, 4, 2, 
	2, 2, 0, 1, 3, 1, 2, 1, 
	9, 1, 5, 2, 3, 3, 3, 3, 
	5, 5, 3, 3, 3, 7, 3, 3, 
	1, 5, 3, 3, 3, 3, 7, 3, 
	3, 11, 3, 5, 19, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	2, 9, 3, 3, 3, 3, 3, 3, 
	5, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 5, 3, 3, 13, 5, 
	3, 3, 3, 3, 3, 3, 10, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	5, 5, 5, 7, 5, 5, 3, 5, 
	3, 3, 3, 3, 3, 5, 3, 7, 
	3, 3, 3, 3, 3, 3, 9, 3, 
	3, 7, 3, 5, 5, 3, 5, 3, 
	3, 6, 3, 3, 7, 3, 5, 3, 
	3, 3, 3, 9, 5, 5, 7, 3, 
	7, 3, 3, 17, 3, 3, 5, 3, 
	3, 3, 3, 7, 5, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 1, 21, 5, 13, 6, 9, 9, 
	9, 9, 13, 13, 9, 9, 9, 17, 
	9, 9, 5, 13, 9, 9, 9, 9, 
	17, 9, 9, 25, 9, 13, 41, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 6, 21, 9, 9, 9, 9, 
	9, 9, 13, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 13, 9, 9, 
	29, 13, 9, 9, 9, 9, 9, 9, 
	23, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 13, 13, 13, 17, 13, 13, 
	9, 13, 9, 9, 9, 9, 9, 13, 
	9, 17, 9, 9, 9, 9, 9, 9, 
	21, 9, 9, 17, 9, 13, 13, 9, 
	13, 9, 9, 15, 9, 9, 17, 9, 
	13, 9, 9, 9, 9, 21, 13, 13, 
	17, 9, 17, 9, 9, 37, 9, 9, 
	13, 9, 9, 9, 9, 17, 13, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9
};
static const char _lexer_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 0, 2, 0, 6, 0, 3, 
	1, 1, 0, 0, 0, 4, 4, 3, 
	3, 4, 3, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	2, 3, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6
};
static const short _lexer_index_offsets[] = {
	0, 0, 3, 7, 22, 25, 29, 33, 
	36, 40, 43, 47, 52, 58, 64, 67, 
	71, 77, 81, 90, 96, 100, 229, 231, 
	235, 238, 240, 242, 257, 259, 270, 279, 
	285, 291, 298, 302, 304, 308, 310, 313, 
	315, 328, 333, 342, 348, 355, 362, 369, 
	376, 385, 394, 401, 408, 415, 426, 433, 
	440, 445, 454, 461, 468, 475, 482, 493, 
	500, 507, 522, 529, 538, 561, 568, 575, 
	582, 589, 596, 603, 610, 617, 624, 631, 
	638, 644, 657, 664, 671, 678, 685, 692, 
	699, 708, 715, 722, 729, 736, 743, 750, 
	757, 764, 771, 778, 787, 794, 801, 818, 
	827, 834, 841, 848, 855, 862, 869, 883, 
	890, 897, 904, 911, 918, 925, 932, 939, 
	946, 955, 964, 973, 984, 993, 1002, 1009, 
	1018, 1025, 1032, 1039, 1046, 1053, 1062, 1069, 
	1080, 1087, 1094, 1101, 1108, 1115, 1122, 1135, 
	1142, 1149, 1160, 1167, 1176, 1185, 1192, 1201, 
	1208, 1215, 1225, 1232, 1239, 1250, 1257, 1266, 
	1273, 1280, 1287, 1294, 1307, 1316, 1325, 1336, 
	1343, 1354, 1361, 1368, 1389, 1396, 1403, 1412, 
	1419, 1426, 1433, 1440, 1451, 1460, 1467, 1474, 
	1481, 1488, 1495, 1502, 1509, 1516, 1523, 1530, 
	1537, 1544, 1551, 1558, 1565, 1572, 1579, 1586, 
	1593, 1599, 1604, 1632, 1644, 1664, 1677, 1693, 
	1709, 1725, 1741, 1761, 1781, 1797, 1813, 1829, 
	1853, 1869, 1885, 1897, 1917, 1933, 1949, 1965, 
	1981, 2005, 2021, 2037, 2069, 2085, 2105, 2153, 
	2169, 2185, 2201, 2217, 2233, 2249, 2265, 2281, 
	2297, 2313, 2329, 2342, 2370, 2386, 2402, 2418, 
	2434, 2450, 2466, 2486, 2502, 2518, 2534, 2550, 
	2566, 2582, 2598, 2614, 2630, 2646, 2666, 2682, 
	2698, 2734, 2754, 2770, 2786, 2802, 2818, 2834, 
	2850, 2880, 2896, 2912, 2928, 2944, 2960, 2976, 
	2992, 3008, 3024, 3044, 3064, 3084, 3108, 3128, 
	3148, 3164, 3184, 3200, 3216, 3232, 3248, 3264, 
	3284, 3300, 3324, 3340, 3356, 3372, 3388, 3404, 
	3420, 3448, 3464, 3480, 3504, 3520, 3540, 3560, 
	3576, 3596, 3612, 3628, 3650, 3666, 3682, 3706, 
	3722, 3742, 3758, 3774, 3790, 3806, 3834, 3854, 
	3874, 3898, 3914, 3938, 3954, 3970, 4014, 4030, 
	4046, 4066, 4082, 4098, 4114, 4130, 4154, 4174, 
	4190, 4206, 4222, 4238, 4254, 4270, 4286, 4302, 
	4318, 4334, 4350, 4366, 4382, 4398, 4414, 4430, 
	4446, 4462
};
static const short _lexer_indicies[] = {
	1, 1, 0, 2, 1, 1, 0, 4, 
	4, 5, 6, 7, 8, 9, 10, 5, 
	6, 7, 8, 9, 10, 3, 11, 11, 
	3, 11, 11, 12, 3, 6, 6, 13, 
	3, 14, 14, 3, 14, 14, 15, 3, 
	16, 16, 3, 16, 16, 17, 3, 18, 
	19, 18, 19, 3, 18, 18, 20, 20, 
	20, 3, 19, 19, 21, 21, 21, 3, 
	22, 22, 3, 22, 22, 23, 3, 25, 
	25, 24, 24, 24, 0, 27, 27, 27, 
	26, 29, 30, 31, 32, 29, 30, 31, 
	32, 28, 34, 34, 35, 35, 35, 33, 
	36, 36, 37, 0, 39, 40, 41, 42, 
	43, 44, 45, 46, 47, 48, 49, 50, 
	51, 52, 53, 55, 56, 58, 59, 60, 
	61, 62, 63, 64, 65, 66, 67, 68, 
	66, 69, 70, 71, 72, 38, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 85, 86, 87, 88, 89, 90, 91, 
	92, 93, 94, 95, 84, 74, 75, 76, 
	77, 78, 79, 80, 81, 82, 83, 85, 
	86, 87, 88, 89, 90, 91, 92, 93, 
	94, 95, 96, 97, 98, 99, 100, 101, 
	102, 103, 104, 105, 106, 108, 109, 110, 
	111, 112, 113, 114, 115, 116, 117, 118, 
	107, 97, 98, 99, 100, 101, 102, 103, 
	104, 105, 106, 108, 109, 110, 111, 112, 
	113, 114, 115, 116, 117, 118, 38, 57, 
	84, 84, 107, 107, 54, 120, 119, 121, 
	121, 121, 0, 122, 123, 0, 123, 124, 
	126, 125, 4, 4, 5, 6, 7, 8, 
	9, 10, 5, 6, 7, 8, 9, 10, 
	127, 129, 128, 131, 25, 132, 131, 25, 
	132, 56, 57, 24, 24, 130, 133, 25, 
	133, 25, 56, 57, 24, 24, 130, 25, 
	25, 57, 24, 24, 130, 25, 25, 24, 
	24, 24, 134, 25, 25, 135, 24, 24, 
	24, 0, 27, 27, 27, 136, 137, 59, 
	139, 140, 141, 138, 143, 142, 145, 146, 
	144, 148, 147, 150, 151, 152, 153, 84, 
	150, 151, 152, 153, 84, 84, 84, 149, 
	84, 84, 84, 84, 0, 155, 156, 84, 
	155, 156, 84, 84, 84, 154, 158, 84, 
	84, 84, 84, 157, 159, 84, 159, 84, 
	84, 84, 154, 160, 84, 160, 84, 84, 
	84, 154, 161, 84, 161, 84, 84, 84, 
	154, 162, 84, 162, 84, 84, 84, 154, 
	164, 165, 84, 164, 165, 84, 84, 84, 
	163, 166, 167, 84, 166, 167, 84, 84, 
	84, 154, 168, 84, 168, 84, 84, 84, 
	154, 169, 84, 169, 84, 84, 84, 154, 
	170, 84, 170, 84, 84, 84, 154, 172, 
	173, 174, 84, 172, 173, 174, 84, 84, 
	84, 171, 175, 84, 175, 84, 84, 84, 
	154, 176, 84, 176, 84, 84, 84, 154, 
	178, 84, 84, 84, 177, 179, 180, 84, 
	179, 180, 84, 84, 84, 154, 181, 84, 
	181, 84, 84, 84, 154, 182, 84, 182, 
	84, 84, 84, 154, 183, 84, 183, 84, 
	84, 84, 154, 184, 84, 184, 84, 84, 
	84, 154, 186, 187, 188, 84, 186, 187, 
	188, 84, 84, 84, 185, 190, 84, 190, 
	84, 84, 84, 189, 192, 84, 192, 84, 
	84, 84, 191, 194, 195, 196, 197, 198, 
	84, 194, 195, 196, 197, 198, 84, 84, 
	84, 193, 199, 84, 199, 84, 84, 84, 
	154, 201, 202, 84, 201, 202, 84, 84, 
	84, 200, 203, 204, 205, 206, 207, 208, 
	209, 210, 211, 84, 203, 204, 205, 206, 
	207, 208, 209, 210, 211, 84, 84, 84, 
	154, 212, 84, 212, 84, 84, 84, 154, 
	213, 84, 213, 84, 84, 84, 154, 214, 
	84, 214, 84, 84, 84, 154, 215, 84, 
	215, 84, 84, 84, 154, 216, 84, 216, 
	84, 84, 84, 154, 217, 84, 217, 84, 
	84, 84, 154, 218, 84, 218, 84, 84, 
	84, 154, 219, 84, 219, 84, 84, 84, 
	154, 220, 84, 220, 84, 84, 84, 154, 
	221, 84, 221, 84, 84, 84, 154, 222, 
	84, 222, 84, 84, 84, 154, 223, 84, 
	84, 84, 84, 154, 225, 226, 227, 228, 
	84, 225, 226, 227, 228, 84, 84, 84, 
	224, 230, 84, 230, 84, 84, 84, 229, 
	231, 84, 231, 84, 84, 84, 154, 232, 
	84, 232, 84, 84, 84, 154, 233, 84, 
	233, 84, 84, 84, 154, 234, 84, 234, 
	84, 84, 84, 154, 235, 84, 235, 84, 
	84, 84, 154, 237, 238, 84, 237, 238, 
	84, 84, 84, 236, 239, 84, 239, 84, 
	84, 84, 154, 240, 84, 240, 84, 84, 
	84, 154, 241, 84, 241, 84, 84, 84, 
	154, 243, 84, 243, 84, 84, 84, 242, 
	244, 84, 244, 84, 84, 84, 154, 245, 
	84, 245, 84, 84, 84, 154, 246, 84, 
	246, 84, 84, 84, 154, 247, 84, 247, 
	84, 84, 84, 154, 248, 84, 248, 84, 
	84, 84, 154, 249, 84, 249, 84, 84, 
	84, 154, 251, 252, 84, 251, 252, 84, 
	84, 84, 250, 253, 84, 253, 84, 84, 
	84, 154, 254, 84, 254, 84, 84, 84, 
	154, 256, 257, 258, 259, 260, 261, 84, 
	256, 257, 258, 259, 260, 261, 84, 84, 
	84, 255, 263, 264, 84, 263, 264, 84, 
	84, 84, 262, 265, 84, 265, 84, 84, 
	84, 154, 266, 84, 266, 84, 84, 84, 
	154, 267, 84, 267, 84, 84, 84, 154, 
	268, 84, 268, 84, 84, 84, 154, 269, 
	84, 269, 84, 84, 84, 154, 270, 84, 
	270, 84, 84, 84, 154, 272, 273, 274, 
	275, 276, 84, 273, 274, 275, 276, 84, 
	84, 84, 271, 278, 84, 278, 84, 84, 
	84, 277, 279, 84, 279, 84, 84, 84, 
	154, 280, 84, 280, 84, 84, 84, 154, 
	281, 84, 281, 84, 84, 84, 154, 283, 
	84, 283, 84, 84, 84, 282, 285, 84, 
	285, 84, 84, 84, 284, 286, 84, 286, 
	84, 84, 84, 154, 287, 84, 287, 84, 
	84, 84, 154, 288, 84, 288, 84, 84, 
	84, 154, 290, 291, 84, 290, 291, 84, 
	84, 84, 289, 293, 294, 84, 293, 294, 
	84, 84, 84, 292, 295, 296, 84, 295, 
	296, 84, 84, 84, 154, 298, 299, 300, 
	84, 298, 299, 300, 84, 84, 84, 297, 
	302, 303, 84, 302, 303, 84, 84, 84, 
	301, 305, 306, 84, 305, 306, 84, 84, 
	84, 304, 308, 84, 308, 84, 84, 84, 
	307, 310, 311, 84, 310, 311, 84, 84, 
	84, 309, 313, 84, 313, 84, 84, 84, 
	312, 314, 84, 314, 84, 84, 84, 154, 
	315, 84, 315, 84, 84, 84, 154, 316, 
	84, 316, 84, 84, 84, 154, 317, 84, 
	317, 84, 84, 84, 154, 318, 319, 84, 
	318, 319, 84, 84, 84, 154, 320, 84, 
	320, 84, 84, 84, 154, 322, 323, 324, 
	84, 322, 323, 324, 84, 84, 84, 321, 
	325, 84, 325, 84, 84, 84, 154, 326, 
	84, 326, 84, 84, 84, 154, 327, 84, 
	327, 84, 84, 84, 154, 328, 84, 328, 
	84, 84, 84, 154, 329, 84, 329, 84, 
	84, 84, 154, 330, 84, 330, 84, 84, 
	84, 154, 331, 332, 333, 334, 84, 331, 
	332, 333, 334, 84, 84, 84, 154, 335, 
	84, 335, 84, 84, 84, 154, 336, 84, 
	336, 84, 84, 84, 154, 337, 338, 339, 
	84, 337, 338, 339, 84, 84, 84, 154, 
	341, 84, 341, 84, 84, 84, 340, 342, 
	343, 84, 342, 343, 84, 84, 84, 154, 
	344, 345, 84, 344, 345, 84, 84, 84, 
	154, 347, 84, 347, 84, 84, 84, 346, 
	348, 349, 84, 348, 349, 84, 84, 84, 
	154, 351, 84, 351, 84, 84, 84, 350, 
	352, 84, 352, 84, 84, 84, 154, 354, 
	355, 356, 84, 355, 356, 84, 84, 84, 
	353, 358, 84, 358, 84, 84, 84, 357, 
	359, 84, 359, 84, 84, 84, 154, 361, 
	362, 363, 84, 361, 362, 363, 84, 84, 
	84, 360, 365, 84, 365, 84, 84, 84, 
	364, 366, 367, 84, 366, 367, 84, 84, 
	84, 154, 368, 84, 368, 84, 84, 84, 
	154, 369, 84, 369, 84, 84, 84, 154, 
	370, 84, 370, 84, 84, 84, 154, 371, 
	84, 371, 84, 84, 84, 154, 373, 374, 
	375, 376, 84, 373, 374, 375, 376, 84, 
	84, 84, 372, 377, 378, 84, 377, 378, 
	84, 84, 84, 154, 380, 381, 84, 380, 
	381, 84, 84, 84, 379, 383, 384, 385, 
	84, 383, 384, 385, 84, 84, 84, 382, 
	387, 84, 387, 84, 84, 84, 386, 389, 
	390, 391, 84, 389, 390, 391, 84, 84, 
	84, 388, 393, 84, 393, 84, 84, 84, 
	392, 394, 84, 394, 84, 84, 84, 154, 
	395, 396, 397, 398, 399, 400, 401, 402, 
	84, 395, 396, 397, 398, 399, 400, 401, 
	402, 84, 84, 84, 154, 403, 84, 403, 
	84, 84, 84, 154, 404, 84, 404, 84, 
	84, 84, 154, 405, 406, 84, 405, 406, 
	84, 84, 84, 154, 407, 84, 407, 84, 
	84, 84, 154, 408, 84, 408, 84, 84, 
	84, 154, 409, 84, 409, 84, 84, 84, 
	154, 410, 84, 410, 84, 84, 84, 154, 
	411, 412, 413, 84, 411, 412, 413, 84, 
	84, 84, 154, 414, 415, 84, 414, 415, 
	84, 84, 84, 154, 416, 84, 416, 84, 
	84, 84, 154, 417, 84, 417, 84, 84, 
	84, 154, 418, 84, 418, 84, 84, 84, 
	154, 419, 84, 419, 84, 84, 84, 154, 
	420, 84, 420, 84, 84, 84, 154, 421, 
	84, 421, 84, 84, 84, 154, 422, 84, 
	422, 84, 84, 84, 154, 423, 84, 423, 
	84, 84, 84, 154, 425, 84, 425, 84, 
	84, 84, 424, 426, 84, 426, 84, 84, 
	84, 154, 427, 84, 427, 84, 84, 84, 
	154, 428, 84, 428, 84, 84, 84, 154, 
	429, 84, 429, 84, 84, 84, 154, 430, 
	84, 430, 84, 84, 84, 154, 431, 84, 
	431, 84, 84, 84, 154, 432, 84, 432, 
	84, 84, 84, 154, 433, 84, 433, 84, 
	84, 84, 154, 434, 84, 434, 84, 84, 
	84, 154, 435, 84, 435, 84, 84, 84, 
	154, 34, 34, 35, 35, 35, 436, 35, 
	35, 35, 35, 437, 150, 151, 152, 153, 
	84, 150, 151, 152, 153, 36, 36, 37, 
	438, 439, 440, 441, 107, 438, 439, 440, 
	441, 84, 84, 84, 107, 107, 107, 149, 
	84, 36, 36, 37, 107, 84, 84, 84, 
	107, 107, 107, 0, 155, 156, 84, 155, 
	156, 36, 36, 37, 442, 443, 107, 442, 
	443, 84, 84, 84, 107, 107, 107, 154, 
	158, 84, 36, 36, 37, 107, 84, 84, 
	84, 107, 107, 107, 157, 159, 84, 159, 
	36, 36, 37, 444, 107, 444, 84, 84, 
	84, 107, 107, 107, 154, 160, 84, 160, 
	36, 36, 37, 445, 107, 445, 84, 84, 
	84, 107, 107, 107, 154, 161, 84, 161, 
	36, 36, 37, 446, 107, 446, 84, 84, 
	84, 107, 107, 107, 154, 162, 84, 162, 
	36, 36, 37, 447, 107, 447, 84, 84, 
	84, 107, 107, 107, 154, 164, 165, 84, 
	164, 165, 36, 36, 37, 448, 449, 107, 
	448, 449, 84, 84, 84, 107, 107, 107, 
	163, 166, 167, 84, 166, 167, 36, 36, 
	37, 450, 451, 107, 450, 451, 84, 84, 
	84, 107, 107, 107, 154, 168, 84, 168, 
	36, 36, 37, 452, 107, 452, 84, 84, 
	84, 107, 107, 107, 154, 169, 84, 169, 
	36, 36, 37, 453, 107, 453, 84, 84, 
	84, 107, 107, 107, 154, 170, 84, 170, 
	36, 36, 37, 454, 107, 454, 84, 84, 
	84, 107, 107, 107, 154, 172, 173, 174, 
	84, 172, 173, 174, 36, 36, 37, 455, 
	456, 457, 107, 455, 456, 457, 84, 84, 
	84, 107, 107, 107, 171, 175, 84, 175, 
	36, 36, 37, 458, 107, 458, 84, 84, 
	84, 107, 107, 107, 154, 176, 84, 176, 
	36, 36, 37, 459, 107, 459, 84, 84, 
	84, 107, 107, 107, 154, 178, 36, 36, 
	37, 460, 84, 84, 84, 107, 107, 107, 
	177, 179, 180, 84, 179, 180, 36, 36, 
	37, 461, 462, 107, 461, 462, 84, 84, 
	84, 107, 107, 107, 154, 181, 84, 181, 
	36, 36, 37, 463, 107, 463, 84, 84, 
	84, 107, 107, 107, 154, 182, 84, 182, 
	36, 36, 37, 464, 107, 464, 84, 84, 
	84, 107, 107, 107, 154, 183, 84, 183, 
	36, 36, 37, 465, 107, 465, 84, 84, 
	84, 107, 107, 107, 154, 184, 84, 184, 
	36, 36, 37, 466, 107, 466, 84, 84, 
	84, 107, 107, 107, 154, 186, 187, 188, 
	84, 186, 187, 188, 36, 36, 37, 467, 
	468, 469, 107, 467, 468, 469, 84, 84, 
	84, 107, 107, 107, 185, 190, 84, 190, 
	36, 36, 37, 470, 107, 470, 84, 84, 
	84, 107, 107, 107, 189, 192, 84, 192, 
	36, 36, 37, 471, 107, 471, 84, 84, 
	84, 107, 107, 107, 191, 194, 195, 196, 
	197, 198, 84, 194, 195, 196, 197, 198, 
	36, 36, 37, 472, 473, 474, 475, 476, 
	107, 472, 473, 474, 475, 476, 84, 84, 
	84, 107, 107, 107, 193, 199, 84, 199, 
	36, 36, 37, 477, 107, 477, 84, 84, 
	84, 107, 107, 107, 154, 201, 202, 84, 
	201, 202, 36, 36, 37, 478, 479, 107, 
	478, 479, 84, 84, 84, 107, 107, 107, 
	200, 203, 204, 205, 206, 207, 208, 209, 
	210, 211, 84, 203, 204, 205, 206, 207, 
	208, 209, 210, 211, 36, 36, 37, 480, 
	481, 482, 483, 484, 485, 486, 487, 488, 
	107, 480, 481, 482, 483, 484, 485, 486, 
	487, 488, 84, 84, 84, 107, 107, 107, 
	154, 212, 84, 212, 36, 36, 37, 489, 
	107, 489, 84, 84, 84, 107, 107, 107, 
	154, 213, 84, 213, 36, 36, 37, 490, 
	107, 490, 84, 84, 84, 107, 107, 107, 
	154, 214, 84, 214, 36, 36, 37, 491, 
	107, 491, 84, 84, 84, 107, 107, 107, 
	154, 215, 84, 215, 36, 36, 37, 492, 
	107, 492, 84, 84, 84, 107, 107, 107, 
	154, 216, 84, 216, 36, 36, 37, 493, 
	107, 493, 84, 84, 84, 107, 107, 107, 
	154, 217, 84, 217, 36, 36, 37, 494, 
	107, 494, 84, 84, 84, 107, 107, 107, 
	154, 218, 84, 218, 36, 36, 37, 495, 
	107, 495, 84, 84, 84, 107, 107, 107, 
	154, 219, 84, 219, 36, 36, 37, 496, 
	107, 496, 84, 84, 84, 107, 107, 107, 
	154, 220, 84, 220, 36, 36, 37, 497, 
	107, 497, 84, 84, 84, 107, 107, 107, 
	154, 221, 84, 221, 36, 36, 37, 498, 
	107, 498, 84, 84, 84, 107, 107, 107, 
	154, 222, 84, 222, 36, 36, 37, 499, 
	107, 499, 84, 84, 84, 107, 107, 107, 
	154, 223, 84, 36, 36, 37, 107, 84, 
	84, 84, 107, 107, 107, 154, 225, 226, 
	227, 228, 84, 225, 226, 227, 228, 36, 
	36, 37, 500, 501, 502, 503, 107, 500, 
	501, 502, 503, 84, 84, 84, 107, 107, 
	107, 224, 230, 84, 230, 36, 36, 37, 
	504, 107, 504, 84, 84, 84, 107, 107, 
	107, 229, 231, 84, 231, 36, 36, 37, 
	505, 107, 505, 84, 84, 84, 107, 107, 
	107, 154, 232, 84, 232, 36, 36, 37, 
	506, 107, 506, 84, 84, 84, 107, 107, 
	107, 154, 233, 84, 233, 36, 36, 37, 
	507, 107, 507, 84, 84, 84, 107, 107, 
	107, 154, 234, 84, 234, 36, 36, 37, 
	508, 107, 508, 84, 84, 84, 107, 107, 
	107, 154, 235, 84, 235, 36, 36, 37, 
	509, 107, 509, 84, 84, 84, 107, 107, 
	107, 154, 237, 238, 84, 237, 238, 36, 
	36, 37, 510, 511, 107, 510, 511, 84, 
	84, 84, 107, 107, 107, 236, 239, 84, 
	239, 36, 36, 37, 512, 107, 512, 84, 
	84, 84, 107, 107, 107, 154, 240, 84, 
	240, 36, 36, 37, 513, 107, 513, 84, 
	84, 84, 107, 107, 107, 154, 241, 84, 
	241, 36, 36, 37, 514, 107, 514, 84, 
	84, 84, 107, 107, 107, 154, 243, 84, 
	243, 36, 36, 37, 515, 107, 515, 84, 
	84, 84, 107, 107, 107, 242, 244, 84, 
	244, 36, 36, 37, 516, 107, 516, 84, 
	84, 84, 107, 107, 107, 154, 245, 84, 
	245, 36, 36, 37, 517, 107, 517, 84, 
	84, 84, 107, 107, 107, 154, 246, 84, 
	246, 36, 36, 37, 518, 107, 518, 84, 
	84, 84, 107, 107, 107, 154, 247, 84, 
	247, 36, 36, 37, 519, 107, 519, 84, 
	84, 84, 107, 107, 107, 154, 248, 84, 
	248, 36, 36, 37, 520, 107, 520, 84, 
	84, 84, 107, 107, 107, 154, 249, 84, 
	249, 36, 36, 37, 521, 107, 521, 84, 
	84, 84, 107, 107, 107, 154, 251, 252, 
	84, 251, 252, 36, 36, 37, 522, 523, 
	107, 522, 523, 84, 84, 84, 107, 107, 
	107, 250, 253, 84, 253, 36, 36, 37, 
	524, 107, 524, 84, 84, 84, 107, 107, 
	107, 154, 254, 84, 254, 36, 36, 37, 
	525, 107, 525, 84, 84, 84, 107, 107, 
	107, 154, 256, 257, 258, 259, 260, 261, 
	84, 256, 257, 258, 259, 260, 261, 36, 
	36, 37, 526, 527, 528, 529, 530, 531, 
	107, 526, 527, 528, 529, 530, 531, 84, 
	84, 84, 107, 107, 107, 255, 263, 264, 
	84, 263, 264, 36, 36, 37, 532, 533, 
	107, 532, 533, 84, 84, 84, 107, 107, 
	107, 262, 265, 84, 265, 36, 36, 37, 
	534, 107, 534, 84, 84, 84, 107, 107, 
	107, 154, 266, 84, 266, 36, 36, 37, 
	535, 107, 535, 84, 84, 84, 107, 107, 
	107, 154, 267, 84, 267, 36, 36, 37, 
	536, 107, 536, 84, 84, 84, 107, 107, 
	107, 154, 268, 84, 268, 36, 36, 37, 
	537, 107, 537, 84, 84, 84, 107, 107, 
	107, 154, 269, 84, 269, 36, 36, 37, 
	538, 107, 538, 84, 84, 84, 107, 107, 
	107, 154, 270, 84, 270, 36, 36, 37, 
	539, 107, 539, 84, 84, 84, 107, 107, 
	107, 154, 272, 273, 274, 275, 276, 84, 
	273, 274, 275, 276, 36, 36, 540, 37, 
	541, 542, 543, 544, 107, 541, 542, 543, 
	544, 84, 84, 84, 107, 107, 107, 271, 
	278, 84, 278, 36, 36, 37, 545, 107, 
	545, 84, 84, 84, 107, 107, 107, 277, 
	279, 84, 279, 36, 36, 37, 546, 107, 
	546, 84, 84, 84, 107, 107, 107, 154, 
	280, 84, 280, 36, 36, 37, 547, 107, 
	547, 84, 84, 84, 107, 107, 107, 154, 
	281, 84, 281, 36, 36, 37, 548, 107, 
	548, 84, 84, 84, 107, 107, 107, 154, 
	283, 84, 283, 36, 36, 37, 549, 107, 
	549, 84, 84, 84, 107, 107, 107, 282, 
	285, 84, 285, 36, 36, 37, 550, 107, 
	550, 84, 84, 84, 107, 107, 107, 284, 
	286, 84, 286, 36, 36, 37, 551, 107, 
	551, 84, 84, 84, 107, 107, 107, 154, 
	287, 84, 287, 36, 36, 37, 552, 107, 
	552, 84, 84, 84, 107, 107, 107, 154, 
	288, 84, 288, 36, 36, 37, 553, 107, 
	553, 84, 84, 84, 107, 107, 107, 154, 
	290, 291, 84, 290, 291, 36, 36, 37, 
	554, 555, 107, 554, 555, 84, 84, 84, 
	107, 107, 107, 289, 293, 294, 84, 293, 
	294, 36, 36, 37, 556, 557, 107, 556, 
	557, 84, 84, 84, 107, 107, 107, 292, 
	295, 296, 84, 295, 296, 36, 36, 37, 
	558, 559, 107, 558, 559, 84, 84, 84, 
	107, 107, 107, 154, 298, 299, 300, 84, 
	298, 299, 300, 36, 36, 37, 560, 561, 
	562, 107, 560, 561, 562, 84, 84, 84, 
	107, 107, 107, 297, 302, 303, 84, 302, 
	303, 36, 36, 37, 563, 564, 107, 563, 
	564, 84, 84, 84, 107, 107, 107, 301, 
	305, 306, 84, 305, 306, 36, 36, 37, 
	565, 566, 107, 565, 566, 84, 84, 84, 
	107, 107, 107, 304, 308, 84, 308, 36, 
	36, 37, 567, 107, 567, 84, 84, 84, 
	107, 107, 107, 307, 310, 311, 84, 310, 
	311, 36, 36, 37, 568, 569, 107, 568, 
	569, 84, 84, 84, 107, 107, 107, 309, 
	313, 84, 313, 36, 36, 37, 570, 107, 
	570, 84, 84, 84, 107, 107, 107, 312, 
	314, 84, 314, 36, 36, 37, 571, 107, 
	571, 84, 84, 84, 107, 107, 107, 154, 
	315, 84, 315, 36, 36, 37, 572, 107, 
	572, 84, 84, 84, 107, 107, 107, 154, 
	316, 84, 316, 36, 36, 37, 573, 107, 
	573, 84, 84, 84, 107, 107, 107, 154, 
	317, 84, 317, 36, 36, 37, 574, 107, 
	574, 84, 84, 84, 107, 107, 107, 154, 
	318, 319, 84, 318, 319, 36, 36, 37, 
	575, 576, 107, 575, 576, 84, 84, 84, 
	107, 107, 107, 154, 320, 84, 320, 36, 
	36, 37, 577, 107, 577, 84, 84, 84, 
	107, 107, 107, 154, 322, 323, 324, 84, 
	322, 323, 324, 36, 36, 37, 578, 579, 
	580, 107, 578, 579, 580, 84, 84, 84, 
	107, 107, 107, 321, 325, 84, 325, 36, 
	36, 37, 581, 107, 581, 84, 84, 84, 
	107, 107, 107, 154, 326, 84, 326, 36, 
	36, 37, 582, 107, 582, 84, 84, 84, 
	107, 107, 107, 154, 327, 84, 327, 36, 
	36, 37, 583, 107, 583, 84, 84, 84, 
	107, 107, 107, 154, 328, 84, 328, 36, 
	36, 37, 584, 107, 584, 84, 84, 84, 
	107, 107, 107, 154, 329, 84, 329, 36, 
	36, 37, 585, 107, 585, 84, 84, 84, 
	107, 107, 107, 154, 330, 84, 330, 36, 
	36, 37, 586, 107, 586, 84, 84, 84, 
	107, 107, 107, 154, 331, 332, 333, 334, 
	84, 331, 332, 333, 334, 36, 36, 37, 
	587, 588, 589, 590, 107, 587, 588, 589, 
	590, 84, 84, 84, 107, 107, 107, 154, 
	335, 84, 335, 36, 36, 37, 591, 107, 
	591, 84, 84, 84, 107, 107, 107, 154, 
	336, 84, 336, 36, 36, 37, 592, 107, 
	592, 84, 84, 84, 107, 107, 107, 154, 
	337, 338, 339, 84, 337, 338, 339, 36, 
	36, 37, 593, 594, 595, 107, 593, 594, 
	595, 84, 84, 84, 107, 107, 107, 154, 
	341, 84, 341, 36, 36, 37, 596, 107, 
	596, 84, 84, 84, 107, 107, 107, 340, 
	342, 343, 84, 342, 343, 36, 36, 37, 
	597, 598, 107, 597, 598, 84, 84, 84, 
	107, 107, 107, 154, 344, 345, 84, 344, 
	345, 36, 36, 37, 599, 600, 107, 599, 
	600, 84, 84, 84, 107, 107, 107, 154, 
	347, 84, 347, 36, 36, 37, 601, 107, 
	601, 84, 84, 84, 107, 107, 107, 346, 
	348, 349, 84, 348, 349, 36, 36, 37, 
	602, 603, 107, 602, 603, 84, 84, 84, 
	107, 107, 107, 154, 351, 84, 351, 36, 
	36, 37, 604, 107, 604, 84, 84, 84, 
	107, 107, 107, 350, 352, 84, 352, 36, 
	36, 37, 605, 107, 605, 84, 84, 84, 
	107, 107, 107, 154, 354, 355, 356, 84, 
	355, 356, 36, 36, 606, 37, 607, 608, 
	107, 607, 608, 84, 84, 84, 107, 107, 
	107, 353, 358, 84, 358, 36, 36, 37, 
	609, 107, 609, 84, 84, 84, 107, 107, 
	107, 357, 359, 84, 359, 36, 36, 37, 
	610, 107, 610, 84, 84, 84, 107, 107, 
	107, 154, 361, 362, 363, 84, 361, 362, 
	363, 36, 36, 37, 611, 612, 613, 107, 
	611, 612, 613, 84, 84, 84, 107, 107, 
	107, 360, 365, 84, 365, 36, 36, 37, 
	614, 107, 614, 84, 84, 84, 107, 107, 
	107, 364, 366, 367, 84, 366, 367, 36, 
	36, 37, 615, 616, 107, 615, 616, 84, 
	84, 84, 107, 107, 107, 154, 368, 84, 
	368, 36, 36, 37, 617, 107, 617, 84, 
	84, 84, 107, 107, 107, 154, 369, 84, 
	369, 36, 36, 37, 618, 107, 618, 84, 
	84, 84, 107, 107, 107, 154, 370, 84, 
	370, 36, 36, 37, 619, 107, 619, 84, 
	84, 84, 107, 107, 107, 154, 371, 84, 
	371, 36, 36, 37, 620, 107, 620, 84, 
	84, 84, 107, 107, 107, 154, 373, 374, 
	375, 376, 84, 373, 374, 375, 376, 36, 
	36, 37, 621, 622, 623, 624, 107, 621, 
	622, 623, 624, 84, 84, 84, 107, 107, 
	107, 372, 377, 378, 84, 377, 378, 36, 
	36, 37, 625, 626, 107, 625, 626, 84, 
	84, 84, 107, 107, 107, 154, 380, 381, 
	84, 380, 381, 36, 36, 37, 627, 628, 
	107, 627, 628, 84, 84, 84, 107, 107, 
	107, 379, 383, 384, 385, 84, 383, 384, 
	385, 36, 36, 37, 629, 630, 631, 107, 
	629, 630, 631, 84, 84, 84, 107, 107, 
	107, 382, 387, 84, 387, 36, 36, 37, 
	632, 107, 632, 84, 84, 84, 107, 107, 
	107, 386, 389, 390, 391, 84, 389, 390, 
	391, 36, 36, 37, 633, 634, 635, 107, 
	633, 634, 635, 84, 84, 84, 107, 107, 
	107, 388, 393, 84, 393, 36, 36, 37, 
	636, 107, 636, 84, 84, 84, 107, 107, 
	107, 392, 394, 84, 394, 36, 36, 37, 
	637, 107, 637, 84, 84, 84, 107, 107, 
	107, 154, 395, 396, 397, 398, 399, 400, 
	401, 402, 84, 395, 396, 397, 398, 399, 
	400, 401, 402, 36, 36, 37, 638, 639, 
	640, 641, 642, 643, 644, 645, 107, 638, 
	639, 640, 641, 642, 643, 644, 645, 84, 
	84, 84, 107, 107, 107, 154, 403, 84, 
	403, 36, 36, 37, 646, 107, 646, 84, 
	84, 84, 107, 107, 107, 154, 404, 84, 
	404, 36, 36, 37, 647, 107, 647, 84, 
	84, 84, 107, 107, 107, 154, 405, 406, 
	84, 405, 406, 36, 36, 37, 648, 649, 
	107, 648, 649, 84, 84, 84, 107, 107, 
	107, 154, 407, 84, 407, 36, 36, 37, 
	650, 107, 650, 84, 84, 84, 107, 107, 
	107, 154, 408, 84, 408, 36, 36, 37, 
	651, 107, 651, 84, 84, 84, 107, 107, 
	107, 154, 409, 84, 409, 36, 36, 37, 
	652, 107, 652, 84, 84, 84, 107, 107, 
	107, 154, 410, 84, 410, 36, 36, 37, 
	653, 107, 653, 84, 84, 84, 107, 107, 
	107, 154, 411, 412, 413, 84, 411, 412, 
	413, 36, 36, 37, 654, 655, 656, 107, 
	654, 655, 656, 84, 84, 84, 107, 107, 
	107, 154, 414, 415, 84, 414, 415, 36, 
	36, 37, 657, 658, 107, 657, 658, 84, 
	84, 84, 107, 107, 107, 154, 416, 84, 
	416, 36, 36, 37, 659, 107, 659, 84, 
	84, 84, 107, 107, 107, 154, 417, 84, 
	417, 36, 36, 37, 660, 107, 660, 84, 
	84, 84, 107, 107, 107, 154, 418, 84, 
	418, 36, 36, 37, 661, 107, 661, 84, 
	84, 84, 107, 107, 107, 154, 419, 84, 
	419, 36, 36, 37, 662, 107, 662, 84, 
	84, 84, 107, 107, 107, 154, 420, 84, 
	420, 36, 36, 37, 663, 107, 663, 84, 
	84, 84, 107, 107, 107, 154, 421, 84, 
	421, 36, 36, 37, 664, 107, 664, 84, 
	84, 84, 107, 107, 107, 154, 422, 84, 
	422, 36, 36, 37, 665, 107, 665, 84, 
	84, 84, 107, 107, 107, 154, 423, 84, 
	423, 36, 36, 37, 666, 107, 666, 84, 
	84, 84, 107, 107, 107, 154, 425, 84, 
	425, 36, 36, 37, 667, 107, 667, 84, 
	84, 84, 107, 107, 107, 424, 426, 84, 
	426, 36, 36, 37, 668, 107, 668, 84, 
	84, 84, 107, 107, 107, 154, 427, 84, 
	427, 36, 36, 37, 669, 107, 669, 84, 
	84, 84, 107, 107, 107, 154, 428, 84, 
	428, 36, 36, 37, 670, 107, 670, 84, 
	84, 84, 107, 107, 107, 154, 429, 84, 
	429, 36, 36, 37, 671, 107, 671, 84, 
	84, 84, 107, 107, 107, 154, 430, 84, 
	430, 36, 36, 37, 672, 107, 672, 84, 
	84, 84, 107, 107, 107, 154, 431, 84, 
	431, 36, 36, 37, 673, 107, 673, 84, 
	84, 84, 107, 107, 107, 154, 432, 84, 
	432, 36, 36, 37, 674, 107, 674, 84, 
	84, 84, 107, 107, 107, 154, 433, 84, 
	433, 36, 36, 37, 675, 107, 675, 84, 
	84, 84, 107, 107, 107, 154, 434, 84, 
	434, 36, 36, 37, 676, 107, 676, 84, 
	84, 84, 107, 107, 107, 154, 435, 84, 
	435, 36, 36, 37, 677, 107, 677, 84, 
	84, 84, 107, 107, 107, 154, 0
};
static const short _lexer_trans_targs[] = {
	21, 2, 21, 21, 3, 4, 6, 7, 
	9, 11, 14, 5, 21, 21, 8, 21, 
	10, 21, 12, 13, 21, 21, 15, 21, 
	16, 21, 21, 34, 21, 21, 21, 21, 
	21, 21, 19, 201, 20, 21, 21, 21, 
	22, 21, 21, 23, 24, 26, 21, 27, 
	21, 28, 21, 21, 21, 21, 0, 29, 
	30, 31, 21, 35, 36, 37, 38, 21, 
	24, 21, 21, 21, 21, 21, 39, 21, 
	21, 21, 40, 48, 53, 65, 81, 92, 
	94, 99, 102, 122, 41, 123, 135, 142, 
	145, 156, 163, 171, 187, 191, 198, 41, 
	200, 202, 210, 215, 227, 243, 254, 256, 
	261, 264, 284, 203, 285, 297, 304, 307, 
	318, 325, 333, 349, 353, 360, 203, 21, 
	21, 23, 1, 25, 21, 21, 21, 21, 
	21, 21, 21, 33, 17, 32, 21, 33, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 42, 43, 
	44, 45, 21, 41, 41, 21, 21, 41, 
	46, 47, 41, 21, 41, 49, 50, 41, 
	51, 52, 41, 21, 54, 61, 62, 55, 
	56, 21, 57, 58, 59, 41, 60, 41, 
	41, 21, 63, 64, 41, 21, 41, 21, 
	41, 21, 66, 67, 41, 78, 80, 41, 
	21, 41, 68, 41, 41, 69, 73, 41, 
	41, 41, 75, 41, 70, 71, 72, 41, 
	74, 41, 76, 77, 41, 79, 41, 18, 
	21, 82, 83, 85, 88, 21, 41, 84, 
	41, 86, 87, 41, 21, 89, 41, 90, 
	91, 41, 21, 93, 41, 95, 96, 97, 
	98, 41, 21, 100, 41, 101, 41, 21, 
	103, 109, 41, 110, 120, 121, 21, 104, 
	106, 105, 41, 107, 108, 41, 41, 21, 
	41, 111, 115, 116, 117, 21, 112, 113, 
	114, 41, 21, 41, 21, 41, 118, 119, 
	41, 21, 41, 41, 21, 41, 41, 41, 
	41, 21, 124, 129, 131, 21, 125, 127, 
	21, 126, 41, 21, 41, 21, 128, 41, 
	21, 41, 130, 41, 132, 133, 134, 41, 
	41, 21, 136, 137, 141, 41, 138, 139, 
	140, 41, 41, 41, 143, 144, 41, 41, 
	41, 146, 147, 152, 21, 41, 148, 150, 
	149, 41, 21, 41, 151, 41, 21, 41, 
	153, 21, 41, 41, 154, 21, 155, 41, 
	21, 41, 157, 158, 21, 41, 159, 162, 
	160, 161, 41, 41, 21, 164, 166, 168, 
	170, 41, 165, 21, 41, 41, 21, 41, 
	167, 41, 21, 41, 21, 41, 169, 41, 
	21, 41, 41, 172, 173, 174, 179, 41, 
	180, 181, 182, 41, 41, 175, 41, 176, 
	177, 178, 41, 41, 41, 41, 41, 41, 
	41, 183, 184, 185, 186, 41, 188, 189, 
	21, 190, 41, 192, 193, 194, 195, 196, 
	197, 41, 199, 41, 21, 21, 204, 205, 
	206, 207, 203, 203, 203, 208, 209, 203, 
	203, 211, 212, 203, 213, 214, 203, 216, 
	223, 224, 217, 218, 219, 220, 221, 203, 
	222, 203, 203, 225, 226, 203, 203, 203, 
	228, 229, 203, 240, 242, 203, 203, 230, 
	203, 203, 231, 235, 203, 203, 203, 237, 
	203, 232, 233, 234, 203, 236, 203, 238, 
	239, 203, 241, 203, 244, 245, 247, 250, 
	203, 246, 203, 248, 249, 203, 251, 203, 
	252, 253, 203, 255, 203, 257, 258, 259, 
	260, 203, 262, 203, 263, 203, 265, 271, 
	203, 272, 282, 283, 266, 268, 267, 203, 
	269, 270, 203, 203, 203, 273, 277, 278, 
	279, 274, 275, 276, 203, 203, 203, 280, 
	281, 203, 203, 203, 203, 203, 203, 203, 
	286, 291, 293, 287, 289, 288, 203, 203, 
	290, 203, 203, 292, 203, 294, 295, 296, 
	203, 203, 298, 299, 303, 203, 300, 301, 
	302, 203, 203, 203, 305, 306, 203, 203, 
	203, 308, 309, 314, 203, 310, 312, 311, 
	203, 203, 313, 203, 203, 315, 203, 203, 
	316, 317, 203, 203, 319, 320, 203, 321, 
	324, 322, 323, 203, 203, 326, 328, 330, 
	332, 203, 327, 203, 203, 203, 329, 203, 
	203, 203, 331, 203, 203, 203, 334, 335, 
	336, 341, 203, 342, 343, 344, 203, 203, 
	337, 203, 338, 339, 340, 203, 203, 203, 
	203, 203, 203, 203, 345, 346, 347, 348, 
	203, 350, 351, 352, 203, 354, 355, 356, 
	357, 358, 359, 203, 361, 203
};
static const short _lexer_trans_actions[] = {
	225, 0, 89, 217, 0, 0, 0, 0, 
	0, 0, 0, 0, 63, 59, 0, 65, 
	0, 67, 0, 0, 69, 71, 0, 73, 
	0, 87, 223, 0, 221, 75, 79, 81, 
	77, 219, 0, 0, 0, 85, 83, 7, 
	0, 93, 9, 683, 230, 0, 91, 5, 
	13, 0, 15, 17, 19, 23, 0, 671, 
	671, 671, 25, 0, 0, 0, 0, 41, 
	683, 43, 95, 45, 47, 51, 0, 55, 
	57, 21, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 668, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 236, 
	5, 284, 257, 242, 260, 263, 287, 668, 
	266, 290, 668, 668, 275, 254, 668, 668, 
	251, 296, 668, 668, 668, 668, 236, 97, 
	33, 674, 0, 0, 215, 99, 11, 101, 
	103, 49, 209, 677, 0, 677, 213, 680, 
	211, 203, 107, 27, 29, 31, 109, 35, 
	111, 39, 37, 113, 53, 133, 0, 0, 
	0, 0, 205, 401, 404, 147, 61, 407, 
	0, 0, 227, 123, 302, 0, 0, 410, 
	0, 0, 323, 115, 0, 0, 0, 0, 
	0, 151, 0, 0, 0, 656, 0, 659, 
	416, 153, 0, 0, 434, 155, 425, 157, 
	431, 125, 0, 0, 443, 0, 5, 437, 
	141, 440, 0, 326, 329, 0, 0, 341, 
	338, 344, 0, 350, 0, 0, 0, 332, 
	0, 335, 0, 0, 347, 0, 446, 0, 
	127, 0, 0, 0, 0, 159, 299, 0, 
	353, 0, 0, 356, 161, 0, 455, 0, 
	0, 359, 135, 0, 662, 0, 0, 0, 
	0, 362, 129, 0, 308, 0, 458, 137, 
	0, 0, 461, 0, 0, 0, 149, 0, 
	0, 0, 368, 0, 0, 371, 293, 163, 
	632, 0, 0, 0, 0, 165, 0, 0, 
	0, 374, 167, 473, 169, 479, 0, 0, 
	665, 143, 269, 278, 145, 272, 281, 482, 
	485, 131, 0, 0, 0, 171, 0, 0, 
	173, 0, 620, 175, 623, 177, 0, 614, 
	179, 617, 0, 377, 0, 0, 0, 383, 
	380, 121, 0, 0, 0, 629, 0, 0, 
	0, 386, 608, 239, 0, 0, 233, 503, 
	506, 0, 0, 0, 181, 389, 0, 0, 
	0, 512, 199, 647, 0, 515, 197, 641, 
	0, 183, 635, 521, 0, 185, 0, 611, 
	119, 248, 0, 0, 117, 527, 0, 0, 
	0, 0, 392, 530, 139, 0, 0, 0, 
	0, 533, 0, 187, 539, 542, 189, 548, 
	0, 557, 191, 554, 193, 563, 0, 572, 
	195, 569, 575, 0, 0, 0, 0, 320, 
	0, 0, 0, 578, 581, 0, 584, 0, 
	0, 0, 395, 587, 590, 626, 593, 596, 
	599, 0, 0, 0, 0, 605, 0, 0, 
	201, 0, 653, 0, 0, 0, 0, 0, 
	0, 398, 0, 602, 105, 207, 668, 317, 
	668, 668, 401, 404, 407, 668, 668, 227, 
	302, 668, 668, 410, 668, 668, 323, 668, 
	668, 419, 668, 413, 668, 668, 668, 656, 
	668, 659, 416, 422, 428, 434, 425, 431, 
	668, 305, 443, 668, 668, 437, 440, 668, 
	326, 329, 668, 668, 341, 338, 344, 668, 
	350, 668, 668, 668, 332, 668, 335, 668, 
	668, 347, 668, 446, 449, 668, 668, 452, 
	299, 668, 353, 668, 668, 356, 668, 455, 
	668, 668, 359, 668, 662, 668, 668, 668, 
	668, 362, 668, 308, 668, 458, 365, 668, 
	461, 464, 311, 314, 668, 668, 668, 368, 
	668, 668, 371, 293, 632, 467, 470, 476, 
	668, 668, 668, 668, 374, 473, 479, 668, 
	668, 665, 269, 278, 272, 281, 482, 485, 
	488, 668, 668, 491, 497, 494, 620, 623, 
	500, 614, 617, 668, 377, 668, 668, 668, 
	383, 380, 668, 668, 668, 629, 668, 668, 
	668, 386, 608, 239, 668, 668, 233, 503, 
	506, 509, 668, 668, 389, 668, 668, 644, 
	512, 647, 638, 515, 641, 518, 635, 521, 
	524, 668, 611, 248, 245, 668, 527, 668, 
	668, 668, 668, 392, 530, 668, 545, 560, 
	668, 533, 536, 539, 542, 548, 551, 557, 
	554, 563, 566, 572, 569, 575, 668, 668, 
	668, 668, 320, 668, 668, 668, 578, 581, 
	668, 584, 668, 668, 668, 395, 587, 590, 
	626, 593, 596, 599, 668, 668, 668, 668, 
	605, 668, 650, 668, 653, 668, 668, 668, 
	668, 668, 668, 398, 668, 602
};
static const short _lexer_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};
static const short _lexer_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};
static const short _lexer_eof_trans[] = {
	0, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	1, 27, 29, 34, 1, 0, 120, 1, 
	1, 125, 126, 128, 129, 131, 131, 131, 
	135, 1, 137, 138, 139, 143, 145, 148, 
	150, 1, 155, 158, 155, 155, 155, 155, 
	164, 155, 155, 155, 155, 172, 155, 155, 
	178, 155, 155, 155, 155, 155, 186, 190, 
	192, 194, 155, 201, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 225, 230, 155, 155, 155, 155, 155, 
	237, 155, 155, 155, 243, 155, 155, 155, 
	155, 155, 155, 251, 155, 155, 256, 263, 
	155, 155, 155, 155, 155, 155, 272, 278, 
	155, 155, 155, 283, 285, 155, 155, 155, 
	290, 293, 155, 298, 302, 305, 308, 310, 
	313, 155, 155, 155, 155, 155, 155, 322, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 341, 155, 155, 347, 155, 351, 
	155, 354, 358, 155, 361, 365, 155, 155, 
	155, 155, 155, 373, 155, 380, 383, 387, 
	389, 393, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 425, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	437, 438, 150, 1, 155, 158, 155, 155, 
	155, 155, 164, 155, 155, 155, 155, 172, 
	155, 155, 178, 155, 155, 155, 155, 155, 
	186, 190, 192, 194, 155, 201, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 225, 230, 155, 155, 155, 
	155, 155, 237, 155, 155, 155, 243, 155, 
	155, 155, 155, 155, 155, 251, 155, 155, 
	256, 263, 155, 155, 155, 155, 155, 155, 
	272, 278, 155, 155, 155, 283, 285, 155, 
	155, 155, 290, 293, 155, 298, 302, 305, 
	308, 310, 313, 155, 155, 155, 155, 155, 
	155, 322, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 341, 155, 155, 347, 
	155, 351, 155, 354, 358, 155, 361, 365, 
	155, 155, 155, 155, 155, 373, 155, 380, 
	383, 387, 389, 393, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 425, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155
};
static const int lexer_start = 21;
static const int lexer_error = 0;
static const int lexer_en_main = 21;
static void set_scan_buf( char *text, Bool _at_bol )
{
 str_set( input_buf, text );
 p = str_data(input_buf);
 at_bol = _at_bol;
 pe = str_data(input_buf) + str_len(input_buf);
 eof = pe;
	{
	cs = lexer_start;
	ts = 0;
	te = 0;
	act = 0;
	}
}
static tokid_t _scan_get( void )
{
	{
	int _klen;
	unsigned int _trans;
	short _widec;
	const short *_acts;
	unsigned int _nacts;
	const short *_keys;
	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _lexer_actions + _lexer_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
	{ts = p;}
	break;
		}
	}
	_widec = (*p);
	_klen = _lexer_cond_lengths[cs];
	_keys = _lexer_cond_keys + (_lexer_cond_offsets[cs]*2);
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				switch ( _lexer_cond_spaces[_lexer_cond_offsets[cs] + ((_mid - _keys)>>1)] ) {
	case 0: {
		_widec = (short)(128 + ((*p) - -128));
		if ( 
 at_bol  ) _widec += 256;
		break;
	}
				}
				break;
			}
		}
	}
	_keys = _lexer_trans_keys + _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + ((_upper-_lower) >> 1);
			if ( _widec < *_mid )
				_upper = _mid - 1;
			else if ( _widec > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}
	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}
_match:
	_trans = _lexer_indicies[_trans];
_eof_trans:
	cs = _lexer_trans_targs[_trans];
	if ( _lexer_trans_actions[_trans] == 0 )
		goto _again;
	_acts = _lexer_actions + _lexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
	{te = p+1;}
	break;
	case 3:
	{act = 1;}
	break;
	case 4:
	{act = 5;}
	break;
	case 5:
	{act = 37;}
	break;
	case 6:
	{act = 38;}
	break;
	case 7:
	{act = 39;}
	break;
	case 8:
	{act = 40;}
	break;
	case 9:
	{act = 41;}
	break;
	case 10:
	{act = 42;}
	break;
	case 11:
	{act = 43;}
	break;
	case 12:
	{act = 44;}
	break;
	case 13:
	{act = 45;}
	break;
	case 14:
	{act = 46;}
	break;
	case 15:
	{act = 47;}
	break;
	case 16:
	{act = 48;}
	break;
	case 17:
	{act = 49;}
	break;
	case 18:
	{act = 50;}
	break;
	case 19:
	{act = 51;}
	break;
	case 20:
	{act = 52;}
	break;
	case 21:
	{act = 53;}
	break;
	case 22:
	{act = 54;}
	break;
	case 23:
	{act = 55;}
	break;
	case 24:
	{act = 56;}
	break;
	case 25:
	{act = 57;}
	break;
	case 26:
	{act = 58;}
	break;
	case 27:
	{act = 59;}
	break;
	case 28:
	{act = 61;}
	break;
	case 29:
	{act = 62;}
	break;
	case 30:
	{act = 63;}
	break;
	case 31:
	{act = 64;}
	break;
	case 32:
	{act = 65;}
	break;
	case 33:
	{act = 66;}
	break;
	case 34:
	{act = 67;}
	break;
	case 35:
	{act = 75;}
	break;
	case 36:
	{act = 76;}
	break;
	case 37:
	{act = 77;}
	break;
	case 38:
	{act = 78;}
	break;
	case 39:
	{act = 79;}
	break;
	case 40:
	{act = 80;}
	break;
	case 41:
	{act = 81;}
	break;
	case 42:
	{act = 82;}
	break;
	case 43:
	{act = 83;}
	break;
	case 44:
	{act = 84;}
	break;
	case 45:
	{act = 85;}
	break;
	case 46:
	{act = 86;}
	break;
	case 47:
	{act = 87;}
	break;
	case 48:
	{act = 88;}
	break;
	case 49:
	{act = 89;}
	break;
	case 50:
	{act = 90;}
	break;
	case 51:
	{act = 91;}
	break;
	case 52:
	{act = 92;}
	break;
	case 53:
	{act = 93;}
	break;
	case 54:
	{act = 94;}
	break;
	case 55:
	{act = 95;}
	break;
	case 56:
	{act = 96;}
	break;
	case 57:
	{act = 97;}
	break;
	case 58:
	{act = 98;}
	break;
	case 59:
	{act = 99;}
	break;
	case 60:
	{act = 100;}
	break;
	case 61:
	{act = 105;}
	break;
	case 62:
	{act = 106;}
	break;
	case 63:
	{act = 107;}
	break;
	case 64:
	{act = 108;}
	break;
	case 65:
	{act = 109;}
	break;
	case 66:
	{act = 110;}
	break;
	case 67:
	{act = 111;}
	break;
	case 68:
	{act = 112;}
	break;
	case 69:
	{act = 113;}
	break;
	case 70:
	{act = 114;}
	break;
	case 71:
	{act = 115;}
	break;
	case 72:
	{act = 116;}
	break;
	case 73:
	{act = 117;}
	break;
	case 74:
	{act = 118;}
	break;
	case 75:
	{act = 119;}
	break;
	case 76:
	{act = 120;}
	break;
	case 77:
	{act = 121;}
	break;
	case 78:
	{act = 122;}
	break;
	case 79:
	{act = 123;}
	break;
	case 80:
	{act = 124;}
	break;
	case 81:
	{act = 125;}
	break;
	case 82:
	{act = 126;}
	break;
	case 83:
	{act = 127;}
	break;
	case 84:
	{act = 128;}
	break;
	case 85:
	{act = 129;}
	break;
	case 86:
	{act = 130;}
	break;
	case 87:
	{act = 131;}
	break;
	case 88:
	{act = 132;}
	break;
	case 89:
	{act = 133;}
	break;
	case 90:
	{act = 134;}
	break;
	case 91:
	{act = 135;}
	break;
	case 92:
	{act = 136;}
	break;
	case 93:
	{act = 137;}
	break;
	case 94:
	{act = 138;}
	break;
	case 95:
	{act = 139;}
	break;
	case 96:
	{act = 140;}
	break;
	case 97:
	{act = 141;}
	break;
	case 98:
	{act = 142;}
	break;
	case 99:
	{act = 143;}
	break;
	case 100:
	{act = 144;}
	break;
	case 101:
	{act = 145;}
	break;
	case 102:
	{act = 146;}
	break;
	case 103:
	{act = 147;}
	break;
	case 104:
	{act = 148;}
	break;
	case 105:
	{act = 149;}
	break;
	case 106:
	{act = 150;}
	break;
	case 107:
	{act = 151;}
	break;
	case 108:
	{act = 152;}
	break;
	case 109:
	{act = 153;}
	break;
	case 110:
	{act = 154;}
	break;
	case 111:
	{act = 155;}
	break;
	case 112:
	{act = 156;}
	break;
	case 113:
	{act = 157;}
	break;
	case 114:
	{act = 158;}
	break;
	case 115:
	{act = 159;}
	break;
	case 116:
	{act = 160;}
	break;
	case 117:
	{act = 161;}
	break;
	case 118:
	{act = 162;}
	break;
	case 119:
	{act = 163;}
	break;
	case 120:
	{act = 164;}
	break;
	case 121:
	{act = 165;}
	break;
	case 122:
	{act = 166;}
	break;
	case 123:
	{act = 167;}
	break;
	case 124:
	{act = 168;}
	break;
	case 125:
	{act = 169;}
	break;
	case 126:
	{act = 170;}
	break;
	case 127:
	{act = 171;}
	break;
	case 128:
	{act = 172;}
	break;
	case 129:
	{act = 173;}
	break;
	case 130:
	{act = 174;}
	break;
	case 131:
	{act = 175;}
	break;
	case 132:
	{act = 176;}
	break;
	case 133:
	{act = 177;}
	break;
	case 134:
	{act = 178;}
	break;
	case 135:
	{act = 179;}
	break;
	case 136:
	{act = 180;}
	break;
	case 137:
	{act = 181;}
	break;
	case 138:
	{act = 182;}
	break;
	case 139:
	{act = 183;}
	break;
	case 140:
	{act = 184;}
	break;
	case 141:
	{act = 185;}
	break;
	case 142:
	{act = 186;}
	break;
	case 143:
	{act = 187;}
	break;
	case 144:
	{act = 188;}
	break;
	case 145:
	{act = 189;}
	break;
	case 146:
	{act = 190;}
	break;
	case 147:
	{act = 191;}
	break;
	case 148:
	{act = 192;}
	break;
	case 149:
	{act = 193;}
	break;
	case 150:
	{act = 196;}
	break;
	case 151:
	{act = 198;}
	break;
	case 152:
	{act = 200;}
	break;
	case 153:
	{act = 202;}
	break;
	case 154:
	{act = 204;}
	break;
	case 155:
	{act = 208;}
	break;
	case 156:
	{te = p+1;{
	sym.tok = TK_NEWLINE;
	;
	{p++; goto _out; }
}}
	break;
	case 157:
	{te = p+1;{
	sym.tok = TK_CONST_EXPR;
	;
	{p++; goto _out; }
}}
	break;
	case 158:
	{te = p+1;{
	sym.tok = TK_LOG_AND;
	;
	{p++; goto _out; }
}}
	break;
	case 159:
	{te = p+1;{
	sym.tok = TK_RPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 160:
	{te = p+1;{
	sym.tok = TK_PLUS;
	;
	{p++; goto _out; }
}}
	break;
	case 161:
	{te = p+1;{
	sym.tok = TK_COMMA;
	;
	{p++; goto _out; }
}}
	break;
	case 162:
	{te = p+1;{
	sym.tok = TK_MINUS;
	;
	{p++; goto _out; }
}}
	break;
	case 163:
	{te = p+1;{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 164:
	{te = p+1;{
	sym.tok = TK_DIVIDE;
	;
	{p++; goto _out; }
}}
	break;
	case 165:
	{te = p+1;{
	sym.tok = TK_COLON;
	;
	{p++; goto _out; }
}}
	break;
	case 166:
	{te = p+1;{
	sym.tok = TK_LEFT_SHIFT;
	;
	{p++; goto _out; }
}}
	break;
	case 167:
	{te = p+1;{
	sym.tok = TK_LESS_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 168:
	{te = p+1;{
	sym.tok = TK_NOT_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 169:
	{te = p+1;{
	sym.tok = TK_NOT_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 170:
	{te = p+1;{
	sym.tok = TK_EQUAL;
	;
	{p++; goto _out; }
}}
	break;
	case 171:
	{te = p+1;{
	sym.tok = TK_RIGHT_SHIFT;
	;
	{p++; goto _out; }
}}
	break;
	case 172:
	{te = p+1;{
	sym.tok = TK_GREATER_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 173:
	{te = p+1;{
	sym.tok = TK_QUESTION;
	;
	{p++; goto _out; }
}}
	break;
	case 174:
	{te = p+1;{
	sym.tok = TK_LSQUARE;
	;
	{p++; goto _out; }
}}
	break;
	case 175:
	{te = p+1;{
	sym.tok = TK_RSQUARE;
	;
	{p++; goto _out; }
}}
	break;
	case 176:
	{te = p+1;{
	sym.tok = TK_BIN_XOR;
	;
	{p++; goto _out; }
}}
	break;
	case 177:
	{te = p+1;{
	sym.tok = TK_POWER;
	;
	{p++; goto _out; }
}}
	break;
	case 178:
	{te = p+1;{
	sym.tok = TK_LCURLY;
	;
	{p++; goto _out; }
}}
	break;
	case 179:
	{te = p+1;{
	sym.tok = TK_LOG_OR;
	;
	{p++; goto _out; }
}}
	break;
	case 180:
	{te = p+1;{
	sym.tok = TK_RCURLY;
	;
	{p++; goto _out; }
}}
	break;
	case 181:
	{te = p+1;{
	sym.tok = TK_BIN_NOT;
	;
	{p++; goto _out; }
}}
	break;
	case 182:
	{te = p+1;{
	sym.tok = TK_IND_C;
	;
	{p++; goto _out; }
}}
	break;
	case 183:
	{te = p+1;{
	sym.tok = TK_AF1;
	;
	{p++; goto _out; }
}}
	break;
	case 184:
	{te = p+1;{
	sym.tok = TK_IND_BC;
	;
	{p++; goto _out; }
}}
	break;
	case 185:
	{te = p+1;{
	sym.tok = TK_IND_DE;
	;
	{p++; goto _out; }
}}
	break;
	case 186:
	{te = p+1;{
	sym.tok = TK_IND_HL;
	;
	{p++; goto _out; }
}}
	break;
	case 187:
	{te = p+1;{
	sym.tok = TK_IND_IX;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 188:
	{te = p+1;{
	sym.tok = TK_IND_IY;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 189:
	{te = p+1;{
	sym.tok = TK_IND_SP;
	;
	{p++; goto _out; }
}}
	break;
	case 190:
	{te = p+1;{
	sym.tok = TK_DS_B;
	;
	{p++; goto _out; }
}}
	break;
	case 191:
	{te = p+1;{
	sym.tok = TK_DS_W;
	;
	{p++; goto _out; }
}}
	break;
	case 192:
	{te = p+1;{
	sym.tok = TK_DS_P;
	;
	{p++; goto _out; }
}}
	break;
	case 193:
	{te = p+1;{
	sym.tok = TK_DS_Q;
	;
	{p++; goto _out; }
}}
	break;
	case 194:
	{te = p+1;}
	break;
	case 195:
	{te = p+1;{
  while ( ts[ 0] == '.' || isspace(ts[ 0]) ) ts++;
  while ( te[-1] == ':' || isspace(te[-1]) ) te--;
  sym.tok = TK_LABEL;
  {p++; goto _out; }
 }}
	break;
	case 196:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 16 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 197:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 3, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 198:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  if ( get_sym_string() &&
                             te - ts == 1 )
  {
   sym.number = *ts;
  }
  else
  {
   sym.number = 0;
   error_invalid_squoted_string();
  }
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 199:
	{te = p+1;{
  sym.tok = TK_STRING;
  if ( ! get_sym_string() )
   error_unclosed_string();
  {p++; goto _out; }
 }}
	break;
	case 200:
	{te = p+1;{
  sym.tok = TK_NIL;
  skip_to_newline();
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 201:
	{te = p;p--;{
	sym.tok = TK_LOG_NOT;
	;
	{p++; goto _out; }
}}
	break;
	case 202:
	{te = p;p--;{
	sym.tok = TK_BIN_AND;
	;
	{p++; goto _out; }
}}
	break;
	case 203:
	{te = p;p--;{
	sym.tok = TK_LPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 204:
	{te = p;p--;{
	sym.tok = TK_MULTIPLY;
	;
	{p++; goto _out; }
}}
	break;
	case 205:
	{te = p;p--;{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 206:
	{te = p;p--;{
	sym.tok = TK_LESS;
	;
	{p++; goto _out; }
}}
	break;
	case 207:
	{te = p;p--;{
	sym.tok = TK_EQUAL;
	;
	{p++; goto _out; }
}}
	break;
	case 208:
	{te = p;p--;{
	sym.tok = TK_GREATER;
	;
	{p++; goto _out; }
}}
	break;
	case 209:
	{te = p;p--;{
	sym.tok = TK_BIN_OR;
	;
	{p++; goto _out; }
}}
	break;
	case 210:
	{te = p;p--;{
	sym.tok = TK_C;
	;
	{p++; goto _out; }
}}
	break;
	case 211:
	{te = p;p--;{
	sym.tok = TK_PO;
	;
	{p++; goto _out; }
}}
	break;
	case 212:
	{te = p;p--;{
	sym.tok = TK_P;
	;
	{p++; goto _out; }
}}
	break;
	case 213:
	{te = p;p--;{
	sym.tok = TK_M;
	;
	{p++; goto _out; }
}}
	break;
	case 214:
	{te = p;p--;{
	sym.tok = TK_B;
	;
	{p++; goto _out; }
}}
	break;
	case 215:
	{te = p;p--;{
	sym.tok = TK_D;
	;
	{p++; goto _out; }
}}
	break;
	case 216:
	{te = p;p--;{
	sym.tok = TK_E;
	;
	{p++; goto _out; }
}}
	break;
	case 217:
	{te = p;p--;{
	sym.tok = TK_H;
	;
	{p++; goto _out; }
}}
	break;
	case 218:
	{te = p;p--;{
	sym.tok = TK_L;
	;
	{p++; goto _out; }
}}
	break;
	case 219:
	{te = p;p--;{
	sym.tok = TK_A;
	;
	{p++; goto _out; }
}}
	break;
	case 220:
	{te = p;p--;{
	sym.tok = TK_F;
	;
	{p++; goto _out; }
}}
	break;
	case 221:
	{te = p;p--;{
	sym.tok = TK_I;
	;
	{p++; goto _out; }
}}
	break;
	case 222:
	{te = p;p--;{
	sym.tok = TK_R;
	;
	{p++; goto _out; }
}}
	break;
	case 223:
	{te = p;p--;{
	sym.tok = TK_DE;
	;
	{p++; goto _out; }
}}
	break;
	case 224:
	{te = p;p--;{
	sym.tok = TK_IX;
	;
	{p++; goto _out; }
}}
	break;
	case 225:
	{te = p;p--;{
	sym.tok = TK_IY;
	;
	{p++; goto _out; }
}}
	break;
	case 226:
	{te = p;p--;{
	sym.tok = TK_AF;
	;
	{p++; goto _out; }
}}
	break;
	case 227:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IF;
		sym.tok_opcode = TK_IF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IF;
	}
	{p++; goto _out; }
}}
	break;
	case 228:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CALL;
		sym.tok_opcode = TK_CALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL;
	}
	{p++; goto _out; }
}}
	break;
	case 229:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CP;
		sym.tok_opcode = TK_CP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CP;
	}
	{p++; goto _out; }
}}
	break;
	case 230:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CPD;
		sym.tok_opcode = TK_CPD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPD;
	}
	{p++; goto _out; }
}}
	break;
	case 231:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CPI;
		sym.tok_opcode = TK_CPI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPI;
	}
	{p++; goto _out; }
}}
	break;
	case 232:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_EI;
		sym.tok_opcode = TK_EI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EI;
	}
	{p++; goto _out; }
}}
	break;
	case 233:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_EX;
		sym.tok_opcode = TK_EX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EX;
	}
	{p++; goto _out; }
}}
	break;
	case 234:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IN;
		sym.tok_opcode = TK_IN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN;
	}
	{p++; goto _out; }
}}
	break;
	case 235:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_INC;
		sym.tok_opcode = TK_INC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INC;
	}
	{p++; goto _out; }
}}
	break;
	case 236:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IND;
		sym.tok_opcode = TK_IND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IND;
	}
	{p++; goto _out; }
}}
	break;
	case 237:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_INI;
		sym.tok_opcode = TK_INI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INI;
	}
	{p++; goto _out; }
}}
	break;
	case 238:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LD;
		sym.tok_opcode = TK_LD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LD;
	}
	{p++; goto _out; }
}}
	break;
	case 239:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDD;
		sym.tok_opcode = TK_LDD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDD;
	}
	{p++; goto _out; }
}}
	break;
	case 240:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDDR;
		sym.tok_opcode = TK_LDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDR;
	}
	{p++; goto _out; }
}}
	break;
	case 241:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDI;
		sym.tok_opcode = TK_LDI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDI;
	}
	{p++; goto _out; }
}}
	break;
	case 242:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDIR;
		sym.tok_opcode = TK_LDIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIR;
	}
	{p++; goto _out; }
}}
	break;
	case 243:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OR;
		sym.tok_opcode = TK_OR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OR;
	}
	{p++; goto _out; }
}}
	break;
	case 244:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OUT;
		sym.tok_opcode = TK_OUT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT;
	}
	{p++; goto _out; }
}}
	break;
	case 245:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OUTI;
		sym.tok_opcode = TK_OUTI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTI;
	}
	{p++; goto _out; }
}}
	break;
	case 246:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RET;
		sym.tok_opcode = TK_RET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RET;
	}
	{p++; goto _out; }
}}
	break;
	case 247:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RL;
		sym.tok_opcode = TK_RL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RL;
	}
	{p++; goto _out; }
}}
	break;
	case 248:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RLC;
		sym.tok_opcode = TK_RLC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLC;
	}
	{p++; goto _out; }
}}
	break;
	case 249:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RR;
		sym.tok_opcode = TK_RR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RR;
	}
	{p++; goto _out; }
}}
	break;
	case 250:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RRC;
		sym.tok_opcode = TK_RRC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRC;
	}
	{p++; goto _out; }
}}
	break;
	case 251:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OTIM;
		sym.tok_opcode = TK_OTIM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIM;
	}
	{p++; goto _out; }
}}
	break;
	case 252:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OTDM;
		sym.tok_opcode = TK_OTDM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDM;
	}
	{p++; goto _out; }
}}
	break;
	case 253:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_TST;
		sym.tok_opcode = TK_TST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TST;
	}
	{p++; goto _out; }
}}
	break;
	case 254:
	{te = p;p--;}
	break;
	case 255:
	{te = p;p--;{
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }}
	break;
	case 256:
	{te = p;p--;{
  while ( ts[ 0] == '.' || isspace(ts[ 0]) ) ts++;
  while ( te[-1] == ':' || isspace(te[-1]) ) te--;
  sym.tok = TK_LABEL;
  {p++; goto _out; }
 }}
	break;
	case 257:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 258:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 2, 16 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 259:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 260:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 1, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 261:
	{{p = ((te))-1;}{
	sym.tok = TK_LPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 262:
	{{p = ((te))-1;}{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 263:
	{{p = ((te))-1;}{
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }}
	break;
	case 264:
	{{p = ((te))-1;}{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 265:
	{	switch( act ) {
	case 1:
	{{p = ((te))-1;}
	sym.tok = TK_ASMPC;
	;
	{p++; goto _out; }
}
	break;
	case 5:
	{{p = ((te))-1;}
	sym.tok = TK_MOD;
	;
	{p++; goto _out; }
}
	break;
	case 37:
	{{p = ((te))-1;}
	sym.tok = TK_NZ;
	;
	{p++; goto _out; }
}
	break;
	case 38:
	{{p = ((te))-1;}
	sym.tok = TK_Z;
	;
	{p++; goto _out; }
}
	break;
	case 39:
	{{p = ((te))-1;}
	sym.tok = TK_NC;
	;
	{p++; goto _out; }
}
	break;
	case 40:
	{{p = ((te))-1;}
	sym.tok = TK_C;
	;
	{p++; goto _out; }
}
	break;
	case 41:
	{{p = ((te))-1;}
	sym.tok = TK_PO;
	;
	{p++; goto _out; }
}
	break;
	case 42:
	{{p = ((te))-1;}
	sym.tok = TK_PE;
	;
	{p++; goto _out; }
}
	break;
	case 43:
	{{p = ((te))-1;}
	sym.tok = TK_P;
	;
	{p++; goto _out; }
}
	break;
	case 44:
	{{p = ((te))-1;}
	sym.tok = TK_M;
	;
	{p++; goto _out; }
}
	break;
	case 45:
	{{p = ((te))-1;}
	sym.tok = TK_B;
	;
	{p++; goto _out; }
}
	break;
	case 46:
	{{p = ((te))-1;}
	sym.tok = TK_D;
	;
	{p++; goto _out; }
}
	break;
	case 47:
	{{p = ((te))-1;}
	sym.tok = TK_E;
	;
	{p++; goto _out; }
}
	break;
	case 48:
	{{p = ((te))-1;}
	sym.tok = TK_H;
	;
	{p++; goto _out; }
}
	break;
	case 49:
	{{p = ((te))-1;}
	sym.tok = TK_IXH;
	;
	{p++; goto _out; }
}
	break;
	case 50:
	{{p = ((te))-1;}
	sym.tok = TK_IYH;
	;
	{p++; goto _out; }
}
	break;
	case 51:
	{{p = ((te))-1;}
	sym.tok = TK_L;
	;
	{p++; goto _out; }
}
	break;
	case 52:
	{{p = ((te))-1;}
	sym.tok = TK_IXL;
	;
	{p++; goto _out; }
}
	break;
	case 53:
	{{p = ((te))-1;}
	sym.tok = TK_IYL;
	;
	{p++; goto _out; }
}
	break;
	case 54:
	{{p = ((te))-1;}
	sym.tok = TK_A;
	;
	{p++; goto _out; }
}
	break;
	case 55:
	{{p = ((te))-1;}
	sym.tok = TK_F;
	;
	{p++; goto _out; }
}
	break;
	case 56:
	{{p = ((te))-1;}
	sym.tok = TK_I;
	;
	{p++; goto _out; }
}
	break;
	case 57:
	{{p = ((te))-1;}
	sym.tok = TK_IIR;
	;
	{p++; goto _out; }
}
	break;
	case 58:
	{{p = ((te))-1;}
	sym.tok = TK_R;
	;
	{p++; goto _out; }
}
	break;
	case 59:
	{{p = ((te))-1;}
	sym.tok = TK_EIR;
	;
	{p++; goto _out; }
}
	break;
	case 61:
	{{p = ((te))-1;}
	sym.tok = TK_BC;
	;
	{p++; goto _out; }
}
	break;
	case 62:
	{{p = ((te))-1;}
	sym.tok = TK_DE;
	;
	{p++; goto _out; }
}
	break;
	case 63:
	{{p = ((te))-1;}
	sym.tok = TK_HL;
	;
	{p++; goto _out; }
}
	break;
	case 64:
	{{p = ((te))-1;}
	sym.tok = TK_IX;
	;
	{p++; goto _out; }
}
	break;
	case 65:
	{{p = ((te))-1;}
	sym.tok = TK_IY;
	;
	{p++; goto _out; }
}
	break;
	case 66:
	{{p = ((te))-1;}
	sym.tok = TK_AF;
	;
	{p++; goto _out; }
}
	break;
	case 67:
	{{p = ((te))-1;}
	sym.tok = TK_SP;
	;
	{p++; goto _out; }
}
	break;
	case 75:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BINARY;
		sym.tok_opcode = TK_BINARY;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BINARY;
	}
	{p++; goto _out; }
}
	break;
	case 76:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFB;
		sym.tok_opcode = TK_DEFB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFB;
	}
	{p++; goto _out; }
}
	break;
	case 77:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFC;
		sym.tok_opcode = TK_DEFC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFC;
	}
	{p++; goto _out; }
}
	break;
	case 78:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFGROUP;
		sym.tok_opcode = TK_DEFGROUP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFGROUP;
	}
	{p++; goto _out; }
}
	break;
	case 79:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFINE;
		sym.tok_opcode = TK_DEFINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFINE;
	}
	{p++; goto _out; }
}
	break;
	case 80:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFQ;
		sym.tok_opcode = TK_DEFQ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFQ;
	}
	{p++; goto _out; }
}
	break;
	case 81:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFM;
		sym.tok_opcode = TK_DEFM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFM;
	}
	{p++; goto _out; }
}
	break;
	case 82:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFS;
		sym.tok_opcode = TK_DEFS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFS;
	}
	{p++; goto _out; }
}
	break;
	case 83:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFVARS;
		sym.tok_opcode = TK_DEFVARS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFVARS;
	}
	{p++; goto _out; }
}
	break;
	case 84:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFW;
		sym.tok_opcode = TK_DEFW;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFW;
	}
	{p++; goto _out; }
}
	break;
	case 85:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ELSE;
		sym.tok_opcode = TK_ELSE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ELSE;
	}
	{p++; goto _out; }
}
	break;
	case 86:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ENDIF;
		sym.tok_opcode = TK_ENDIF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ENDIF;
	}
	{p++; goto _out; }
}
	break;
	case 87:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EXTERN;
		sym.tok_opcode = TK_EXTERN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EXTERN;
	}
	{p++; goto _out; }
}
	break;
	case 88:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_GLOBAL;
		sym.tok_opcode = TK_GLOBAL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_GLOBAL;
	}
	{p++; goto _out; }
}
	break;
	case 89:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IF;
		sym.tok_opcode = TK_IF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IF;
	}
	{p++; goto _out; }
}
	break;
	case 90:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IFDEF;
		sym.tok_opcode = TK_IFDEF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IFDEF;
	}
	{p++; goto _out; }
}
	break;
	case 91:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IFNDEF;
		sym.tok_opcode = TK_IFNDEF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IFNDEF;
	}
	{p++; goto _out; }
}
	break;
	case 92:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INCLUDE;
		sym.tok_opcode = TK_INCLUDE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INCLUDE;
	}
	{p++; goto _out; }
}
	break;
	case 93:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LINE;
		sym.tok_opcode = TK_LINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LINE;
	}
	{p++; goto _out; }
}
	break;
	case 94:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSTOFF;
		sym.tok_opcode = TK_LSTOFF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSTOFF;
	}
	{p++; goto _out; }
}
	break;
	case 95:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSTON;
		sym.tok_opcode = TK_LSTON;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSTON;
	}
	{p++; goto _out; }
}
	break;
	case 96:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MODULE;
		sym.tok_opcode = TK_MODULE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MODULE;
	}
	{p++; goto _out; }
}
	break;
	case 97:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ORG;
		sym.tok_opcode = TK_ORG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ORG;
	}
	{p++; goto _out; }
}
	break;
	case 98:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PUBLIC;
		sym.tok_opcode = TK_PUBLIC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PUBLIC;
	}
	{p++; goto _out; }
}
	break;
	case 99:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SECTION;
		sym.tok_opcode = TK_SECTION;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SECTION;
	}
	{p++; goto _out; }
}
	break;
	case 100:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UNDEFINE;
		sym.tok_opcode = TK_UNDEFINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UNDEFINE;
	}
	{p++; goto _out; }
}
	break;
	case 105:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ADC;
		sym.tok_opcode = TK_ADC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ADC;
	}
	{p++; goto _out; }
}
	break;
	case 106:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ADD;
		sym.tok_opcode = TK_ADD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ADD;
	}
	{p++; goto _out; }
}
	break;
	case 107:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_AND;
		sym.tok_opcode = TK_AND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_AND;
	}
	{p++; goto _out; }
}
	break;
	case 108:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BIT;
		sym.tok_opcode = TK_BIT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BIT;
	}
	{p++; goto _out; }
}
	break;
	case 109:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL;
		sym.tok_opcode = TK_CALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL;
	}
	{p++; goto _out; }
}
	break;
	case 110:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CCF;
		sym.tok_opcode = TK_CCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CCF;
	}
	{p++; goto _out; }
}
	break;
	case 111:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CP;
		sym.tok_opcode = TK_CP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CP;
	}
	{p++; goto _out; }
}
	break;
	case 112:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPD;
		sym.tok_opcode = TK_CPD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPD;
	}
	{p++; goto _out; }
}
	break;
	case 113:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPDR;
		sym.tok_opcode = TK_CPDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPDR;
	}
	{p++; goto _out; }
}
	break;
	case 114:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPI;
		sym.tok_opcode = TK_CPI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPI;
	}
	{p++; goto _out; }
}
	break;
	case 115:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPIR;
		sym.tok_opcode = TK_CPIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPIR;
	}
	{p++; goto _out; }
}
	break;
	case 116:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPL;
		sym.tok_opcode = TK_CPL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPL;
	}
	{p++; goto _out; }
}
	break;
	case 117:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DAA;
		sym.tok_opcode = TK_DAA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DAA;
	}
	{p++; goto _out; }
}
	break;
	case 118:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEC;
		sym.tok_opcode = TK_DEC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEC;
	}
	{p++; goto _out; }
}
	break;
	case 119:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DI;
		sym.tok_opcode = TK_DI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DI;
	}
	{p++; goto _out; }
}
	break;
	case 120:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DJNZ;
		sym.tok_opcode = TK_DJNZ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DJNZ;
	}
	{p++; goto _out; }
}
	break;
	case 121:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EI;
		sym.tok_opcode = TK_EI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EI;
	}
	{p++; goto _out; }
}
	break;
	case 122:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EX;
		sym.tok_opcode = TK_EX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EX;
	}
	{p++; goto _out; }
}
	break;
	case 123:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EXX;
		sym.tok_opcode = TK_EXX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EXX;
	}
	{p++; goto _out; }
}
	break;
	case 124:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_HALT;
		sym.tok_opcode = TK_HALT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_HALT;
	}
	{p++; goto _out; }
}
	break;
	case 125:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IM;
		sym.tok_opcode = TK_IM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IM;
	}
	{p++; goto _out; }
}
	break;
	case 126:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IN;
		sym.tok_opcode = TK_IN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN;
	}
	{p++; goto _out; }
}
	break;
	case 127:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INC;
		sym.tok_opcode = TK_INC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INC;
	}
	{p++; goto _out; }
}
	break;
	case 128:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IND;
		sym.tok_opcode = TK_IND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IND;
	}
	{p++; goto _out; }
}
	break;
	case 129:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INDR;
		sym.tok_opcode = TK_INDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INDR;
	}
	{p++; goto _out; }
}
	break;
	case 130:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INI;
		sym.tok_opcode = TK_INI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INI;
	}
	{p++; goto _out; }
}
	break;
	case 131:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INIR;
		sym.tok_opcode = TK_INIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INIR;
	}
	{p++; goto _out; }
}
	break;
	case 132:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_JP;
		sym.tok_opcode = TK_JP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_JP;
	}
	{p++; goto _out; }
}
	break;
	case 133:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_JR;
		sym.tok_opcode = TK_JR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_JR;
	}
	{p++; goto _out; }
}
	break;
	case 134:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LD;
		sym.tok_opcode = TK_LD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LD;
	}
	{p++; goto _out; }
}
	break;
	case 135:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDD;
		sym.tok_opcode = TK_LDD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDD;
	}
	{p++; goto _out; }
}
	break;
	case 136:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDR;
		sym.tok_opcode = TK_LDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDR;
	}
	{p++; goto _out; }
}
	break;
	case 137:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDI;
		sym.tok_opcode = TK_LDI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDI;
	}
	{p++; goto _out; }
}
	break;
	case 138:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIR;
		sym.tok_opcode = TK_LDIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIR;
	}
	{p++; goto _out; }
}
	break;
	case 139:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NEG;
		sym.tok_opcode = TK_NEG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NEG;
	}
	{p++; goto _out; }
}
	break;
	case 140:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NOP;
		sym.tok_opcode = TK_NOP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NOP;
	}
	{p++; goto _out; }
}
	break;
	case 141:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OR;
		sym.tok_opcode = TK_OR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OR;
	}
	{p++; goto _out; }
}
	break;
	case 142:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDR;
		sym.tok_opcode = TK_OTDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDR;
	}
	{p++; goto _out; }
}
	break;
	case 143:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIR;
		sym.tok_opcode = TK_OTIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIR;
	}
	{p++; goto _out; }
}
	break;
	case 144:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUT;
		sym.tok_opcode = TK_OUT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT;
	}
	{p++; goto _out; }
}
	break;
	case 145:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTD;
		sym.tok_opcode = TK_OUTD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTD;
	}
	{p++; goto _out; }
}
	break;
	case 146:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTI;
		sym.tok_opcode = TK_OUTI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTI;
	}
	{p++; goto _out; }
}
	break;
	case 147:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_POP;
		sym.tok_opcode = TK_POP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_POP;
	}
	{p++; goto _out; }
}
	break;
	case 148:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PUSH;
		sym.tok_opcode = TK_PUSH;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PUSH;
	}
	{p++; goto _out; }
}
	break;
	case 149:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RES;
		sym.tok_opcode = TK_RES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RES;
	}
	{p++; goto _out; }
}
	break;
	case 150:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RET;
		sym.tok_opcode = TK_RET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RET;
	}
	{p++; goto _out; }
}
	break;
	case 151:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RETI;
		sym.tok_opcode = TK_RETI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RETI;
	}
	{p++; goto _out; }
}
	break;
	case 152:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RETN;
		sym.tok_opcode = TK_RETN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RETN;
	}
	{p++; goto _out; }
}
	break;
	case 153:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RL;
		sym.tok_opcode = TK_RL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RL;
	}
	{p++; goto _out; }
}
	break;
	case 154:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLA;
		sym.tok_opcode = TK_RLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLA;
	}
	{p++; goto _out; }
}
	break;
	case 155:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLC;
		sym.tok_opcode = TK_RLC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLC;
	}
	{p++; goto _out; }
}
	break;
	case 156:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLCA;
		sym.tok_opcode = TK_RLCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLCA;
	}
	{p++; goto _out; }
}
	break;
	case 157:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLD;
		sym.tok_opcode = TK_RLD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLD;
	}
	{p++; goto _out; }
}
	break;
	case 158:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RR;
		sym.tok_opcode = TK_RR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RR;
	}
	{p++; goto _out; }
}
	break;
	case 159:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRA;
		sym.tok_opcode = TK_RRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRA;
	}
	{p++; goto _out; }
}
	break;
	case 160:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRC;
		sym.tok_opcode = TK_RRC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRC;
	}
	{p++; goto _out; }
}
	break;
	case 161:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRCA;
		sym.tok_opcode = TK_RRCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRCA;
	}
	{p++; goto _out; }
}
	break;
	case 162:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRD;
		sym.tok_opcode = TK_RRD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRD;
	}
	{p++; goto _out; }
}
	break;
	case 163:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RST;
		sym.tok_opcode = TK_RST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RST;
	}
	{p++; goto _out; }
}
	break;
	case 164:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SBC;
		sym.tok_opcode = TK_SBC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SBC;
	}
	{p++; goto _out; }
}
	break;
	case 165:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SCF;
		sym.tok_opcode = TK_SCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SCF;
	}
	{p++; goto _out; }
}
	break;
	case 166:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SET;
		sym.tok_opcode = TK_SET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SET;
	}
	{p++; goto _out; }
}
	break;
	case 167:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLA;
		sym.tok_opcode = TK_SLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLA;
	}
	{p++; goto _out; }
}
	break;
	case 168:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLL;
		sym.tok_opcode = TK_SLL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLL;
	}
	{p++; goto _out; }
}
	break;
	case 169:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SRA;
		sym.tok_opcode = TK_SRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SRA;
	}
	{p++; goto _out; }
}
	break;
	case 170:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SRL;
		sym.tok_opcode = TK_SRL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SRL;
	}
	{p++; goto _out; }
}
	break;
	case 171:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SUB;
		sym.tok_opcode = TK_SUB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SUB;
	}
	{p++; goto _out; }
}
	break;
	case 172:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_XOR;
		sym.tok_opcode = TK_XOR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_XOR;
	}
	{p++; goto _out; }
}
	break;
	case 173:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SWAPNIB;
		sym.tok_opcode = TK_SWAPNIB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SWAPNIB;
	}
	{p++; goto _out; }
}
	break;
	case 174:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MUL;
		sym.tok_opcode = TK_MUL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MUL;
	}
	{p++; goto _out; }
}
	break;
	case 175:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTINB;
		sym.tok_opcode = TK_OUTINB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTINB;
	}
	{p++; goto _out; }
}
	break;
	case 176:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIX;
		sym.tok_opcode = TK_LDIX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIX;
	}
	{p++; goto _out; }
}
	break;
	case 177:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIRX;
		sym.tok_opcode = TK_LDIRX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIRX;
	}
	{p++; goto _out; }
}
	break;
	case 178:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDX;
		sym.tok_opcode = TK_LDDX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDX;
	}
	{p++; goto _out; }
}
	break;
	case 179:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDRX;
		sym.tok_opcode = TK_LDDRX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDRX;
	}
	{p++; goto _out; }
}
	break;
	case 180:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLP;
		sym.tok_opcode = TK_SLP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLP;
	}
	{p++; goto _out; }
}
	break;
	case 181:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MLT;
		sym.tok_opcode = TK_MLT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MLT;
	}
	{p++; goto _out; }
}
	break;
	case 182:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IN0;
		sym.tok_opcode = TK_IN0;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN0;
	}
	{p++; goto _out; }
}
	break;
	case 183:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUT0;
		sym.tok_opcode = TK_OUT0;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT0;
	}
	{p++; goto _out; }
}
	break;
	case 184:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIM;
		sym.tok_opcode = TK_OTIM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIM;
	}
	{p++; goto _out; }
}
	break;
	case 185:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIMR;
		sym.tok_opcode = TK_OTIMR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIMR;
	}
	{p++; goto _out; }
}
	break;
	case 186:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDM;
		sym.tok_opcode = TK_OTDM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDM;
	}
	{p++; goto _out; }
}
	break;
	case 187:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDMR;
		sym.tok_opcode = TK_OTDMR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDMR;
	}
	{p++; goto _out; }
}
	break;
	case 188:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TST;
		sym.tok_opcode = TK_TST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TST;
	}
	{p++; goto _out; }
}
	break;
	case 189:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TSTIO;
		sym.tok_opcode = TK_TSTIO;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TSTIO;
	}
	{p++; goto _out; }
}
	break;
	case 190:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL_OZ;
		sym.tok_opcode = TK_CALL_OZ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL_OZ;
	}
	{p++; goto _out; }
}
	break;
	case 191:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL_PKG;
		sym.tok_opcode = TK_CALL_PKG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL_PKG;
	}
	{p++; goto _out; }
}
	break;
	case 192:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_FPP;
		sym.tok_opcode = TK_FPP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FPP;
	}
	{p++; goto _out; }
}
	break;
	case 193:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INVOKE;
		sym.tok_opcode = TK_INVOKE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INVOKE;
	}
	{p++; goto _out; }
}
	break;
	case 196:
	{{p = ((te))-1;}
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }
	break;
	case 198:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 200:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 1, te - ts - 1, 16 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 202:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 204:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 2, 2 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 208:
	{{p = ((te))-1;}
  sym.tok = TK_NIL;
  skip_to_newline();
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	}
	}
	break;
		}
	}
_again:
	_acts = _lexer_actions + _lexer_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
	{ts = 0;}
	break;
		}
	}
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _lexer_eof_trans[cs] > 0 ) {
		_trans = _lexer_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}
	_out: {}
	}
 return sym.tok;
}
