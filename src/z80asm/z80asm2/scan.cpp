/* Generated by re2c 4.2 */
//-----------------------------------------------------------------------------
// Z80 assembler
// Copyright (C) Paulo Custodio, 2011-2025
// License: The Artistic License 2.0, http://www.perlfoundation.org/artistic_license_2_0
//-----------------------------------------------------------------------------

#include "errors.h"
#include "keywords.h"
#include "lexer.h"
#include "options.h"
#include "utils.h"

#define PUSH_TOKEN1(type) \
    do { \
        str = std::string(tok, p); \
        Token t(type, str); \
        output.push_back(t); \
    } while (0)

#define PUSH_TOKEN2(type, arg) \
    do { \
        str = std::string(tok, p); \
        Token t(type, str, arg); \
        output.push_back(t); \
    } while (0)

#define YYFILL() 1

static void swap_x_y(std::string& str) {
    // replace IX<->IY, IXH<->IYH, AIX<->AIY, XIX<->YIY
    for (auto& c : str) {
        switch (c) {
        case 'x':
            c = 'y';
            break;
        case 'X':
            c = 'Y';
            break;
        case 'y':
            c = 'x';
            break;
        case 'Y':
            c = 'X';
            break;
        default:
            ;
        }
    }
}

static void swap_ix_iy(std::string& str, Keyword& keyword) {
    switch (keyword) {
    case Keyword::IX:
    case Keyword::IXH:
    case Keyword::IXL:
    case Keyword::IY:
    case Keyword::IYH:
    case Keyword::IYL:
    case Keyword::AIX:
    case Keyword::PIX:
    case Keyword::XIX:
    case Keyword::YIX:
    case Keyword::ZIX:
    case Keyword::AIY:
    case Keyword::PIY:
    case Keyword::XIY:
    case Keyword::YIY:
    case Keyword::ZIY:
        swap_x_y(str);
        keyword = keyword_lookup(str);
        break;
    default:
        ;
    }
}

void TokensFile::tokenize_line(unsigned& line_index, TokensLine& output) {
    if (line_index >= line_count()) {
        return;
    }

    const char* p = text_lines_[line_index].c_str();
    const char* pe = p + text_lines_[line_index].size();
    const char* tok = p;
    const char* marker = p;
    char end_quote = 0;
    bool raw_strings = false;   // set to true after INCLUDE/LINE/...
    const char* string_start = p;
    std::string str;
    std::string str_content;

main_loop:
    while (p < pe) {
        tok = p;


        {
            char yych;
            unsigned int yyaccept = 0;
yyFillLabel0:
            yych = *p;
            switch (yych) {
            case '\t':
            case '\n':
            case '\v':
            case '\f':
            case '\r':
            case ' ':
                goto yy3;
            case '!':
                goto yy5;
            case '"':
                goto yy7;
            case '#':
                goto yy8;
            case '$':
                goto yy10;
            case '%':
                goto yy12;
            case '&':
                goto yy14;
            case '\'':
                goto yy16;
            case '(':
                goto yy17;
            case ')':
                goto yy18;
            case '*':
                goto yy19;
            case '+':
                goto yy21;
            case ',':
                goto yy22;
            case '-':
                goto yy23;
            case '.':
                goto yy24;
            case '/':
                goto yy26;
            case '0':
                goto yy28;
            case '1':
                goto yy30;
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                goto yy32;
            case ':':
                goto yy33;
            case ';':
                goto yy34;
            case '<':
                goto yy35;
            case '=':
                goto yy37;
            case '>':
                goto yy39;
            case '?':
                goto yy41;
            case '@':
                goto yy42;
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
                goto yy43;
            case '[':
                goto yy45;
            case '\\':
                goto yy46;
            case ']':
                goto yy48;
            case '^':
                goto yy49;
            case '{':
                goto yy51;
            case '|':
                goto yy52;
            case '}':
                goto yy54;
            case '~':
                goto yy55;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel0;
                    }
                    goto yy98;
                }
                goto yy1;
            }
yy1:
            ++p;
yy2: {
                g_errors.error(ErrorCode::InvalidSyntax,
                               "Unexpected character: '" + std::string(tok, p) + "'");
                output.clear();
                return;
            }
yy3:
            ++p;
yyFillLabel1:
            yych = *p;
            switch (yych) {
            case '\t':
            case '\n':
            case '\v':
            case '\f':
            case '\r':
            case ' ':
                goto yy3;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel1;
                    }
                }
                goto yy4;
            }
yy4: {
                PUSH_TOKEN1(TokenType::Whitespace);
                continue;
            }
yy5:
            ++p;
yyFillLabel2:
            yych = *p;
            switch (yych) {
            case '=':
                goto yy56;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel2;
                    }
                }
                goto yy6;
            }
yy6: {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::LogicalNot);
                continue;
            }
yy7:
            ++p;
            {
                end_quote = '"';
                string_start = tok;
                goto string_loop;
            }
yy8:
            ++p;
yyFillLabel3:
            yych = *p;
            switch (yych) {
            case '#':
                goto yy57;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel3;
                    }
                }
                goto yy9;
            }
yy9: {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::Hash);
                continue;
            }
yy10:
            ++p;
yyFillLabel4:
            yych = *p;
            switch (yych) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
                goto yy58;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel4;
                    }
                }
                goto yy11;
            }
yy11: {
                str = "ASMPC";
                Token t(TokenType::Identifier, str, keyword_lookup(str));
                output.push_back(t);
            }
yy12:
            yyaccept = 0;
            marker = ++p;
yyFillLabel5:
            yych = *p;
            switch (yych) {
            case '"':
                goto yy60;
            case '0':
            case '1':
                goto yy62;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel5;
                    }
                }
                goto yy13;
            }
yy13: {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::Modulus);
                continue;
            }
yy14:
            ++p;
yyFillLabel6:
            yych = *p;
            switch (yych) {
            case '&':
                goto yy64;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel6;
                    }
                }
                goto yy15;
            }
yy15: {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::BitwiseAnd);
                continue;
            }
yy16:
            ++p;
            {
                end_quote = '\'';
                string_start = tok;
                goto string_loop;
            }
yy17:
            ++p;
            {
                PUSH_TOKEN1(TokenType::LeftParen);
                continue;
            }
yy18:
            ++p;
            {
                PUSH_TOKEN1(TokenType::RightParen);
                continue;
            }
yy19:
            ++p;
yyFillLabel7:
            yych = *p;
            switch (yych) {
            case '*':
                goto yy65;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel7;
                    }
                }
                goto yy20;
            }
yy20: {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::Multiply);
                continue;
            }
yy21:
            ++p;
            {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::Plus);
                continue;
            }
yy22:
            ++p;
            {
                PUSH_TOKEN1(TokenType::Comma);
                continue;
            }
yy23:
            ++p;
            {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::Minus);
                continue;
            }
yy24:
            ++p;
yyFillLabel8:
            yych = *p;
            switch (yych) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                goto yy66;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel8;
                    }
                }
                goto yy25;
            }
yy25: {
                PUSH_TOKEN1(TokenType::Dot);
                continue;
            }
yy26:
            ++p;
yyFillLabel9:
            yych = *p;
            switch (yych) {
            case '*':
                goto yy68;
            case '/':
                goto yy69;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel9;
                    }
                }
                goto yy27;
            }
yy27: {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::Divide);
                continue;
            }
yy28:
            yyaccept = 1;
            marker = ++p;
yyFillLabel10:
            yych = *p;
            switch (yych) {
            case 0x00:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel10;
                    }
                }
                goto yy29;
            case 'B':
            case 'b':
                goto yy71;
            case 'X':
            case 'x':
                goto yy75;
            default:
                goto yy31;
            }
yy29: {
                std::string digits = std::string(tok, p);
                if (digits.back() == 'd' || digits.back() == 'D') {
                    digits.pop_back();
                }
                int value = 0;
                if (!parse_int_from_chars(digits.c_str(), 10, value)) {
                    g_errors.error(ErrorCode::InvalidInteger,
                                   "Invalid decimal integer: " + digits);
                    output.clear();
                    return;
                }

                PUSH_TOKEN2(TokenType::Integer, value);
                continue;
            }
yy30:
            yyaccept = 1;
            marker = ++p;
yyFillLabel11:
            yych = *p;
yy31:
            switch (yych) {
            case '.':
                goto yy66;
            case '0':
            case '1':
                goto yy30;
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                goto yy32;
            case 'A':
            case 'C':
            case 'E':
            case 'F':
            case 'a':
            case 'c':
            case 'e':
            case 'f':
                goto yy70;
            case 'B':
            case 'b':
                goto yy76;
            case 'D':
            case 'd':
                goto yy73;
            case 'H':
            case 'h':
                goto yy74;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel11;
                    }
                }
                goto yy29;
            }
yy32:
            yyaccept = 1;
            marker = ++p;
yyFillLabel12:
            yych = *p;
            switch (yych) {
            case '.':
                goto yy66;
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                goto yy32;
            case 'A':
            case 'B':
            case 'C':
            case 'E':
            case 'F':
            case 'a':
            case 'b':
            case 'c':
            case 'e':
            case 'f':
                goto yy70;
            case 'D':
            case 'd':
                goto yy73;
            case 'H':
            case 'h':
                goto yy74;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel12;
                    }
                }
                goto yy29;
            }
yy33:
            ++p;
            {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::Colon);
                continue;
            }
yy34:
            ++p;
            {
                goto eof;
            }
yy35:
            ++p;
yyFillLabel13:
            yych = *p;
            switch (yych) {
            case '<':
                goto yy77;
            case '=':
                goto yy78;
            case '>':
                goto yy56;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel13;
                    }
                }
                goto yy36;
            }
yy36: {
                if (raw_strings) {
                    end_quote = '>';
                    string_start = tok;
                    goto string_loop;
                }
                else {
                    PUSH_TOKEN2(TokenType::Operator,
                                OperatorType::LT);
                    continue;
                }
            }
yy37:
            ++p;
yyFillLabel14:
            yych = *p;
            switch (yych) {
            case '=':
                goto yy79;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel14;
                    }
                }
                goto yy38;
            }
yy38: {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::EQ);
                continue;
            }
yy39:
            ++p;
yyFillLabel15:
            yych = *p;
            switch (yych) {
            case '=':
                goto yy80;
            case '>':
                goto yy81;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel15;
                    }
                }
                goto yy40;
            }
yy40: {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::GT);
                continue;
            }
yy41:
            ++p;
            {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::Quest);
                continue;
            }
yy42:
            yyaccept = 2;
            marker = ++p;
yyFillLabel16:
            yych = *p;
            switch (yych) {
            case '"':
                goto yy60;
            case '0':
            case '1':
                goto yy62;
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
                goto yy82;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel16;
                    }
                }
                goto yy2;
            }
yy43:
            yyaccept = 3;
            marker = ++p;
yyFillLabel17:
            yych = *p;
            switch (yych) {
            case '\'':
                goto yy83;
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
                goto yy43;
            case '@':
                goto yy84;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel17;
                    }
                }
                goto yy44;
            }
yy44: {
                str = std::string(tok, p);

                // to upper
                if (g_options.ucase_labels) {
                    str = to_upper(str);
                }

                // handle af' et all
                Keyword keyword = keyword_lookup(str);
                if (str.back() == '\'' && keyword == Keyword::None) {
                    // drop quote
                    str.pop_back();
                    --p;
                    keyword = keyword_lookup(str);
                }

                // check for -IXIY
                if (g_options.swap_ix_iy) {
                    swap_ix_iy(str, keyword);
                }

                // check for .ASSUME
                if (keyword == Keyword::ASSUME && !output.empty() &&
                        output.back().is(TokenType::Dot)) {
                    output.pop_back();       // remove '.'
                }

                // need raw strings after INCLUDE, BINARY, INCBIN, LINE, C_LINE
                switch (keyword) {
                case Keyword::INCLUDE:
                case Keyword::BINARY:
                case Keyword::INCBIN:
                case Keyword::LINE:
                case Keyword::C_LINE:
                    raw_strings = true;
                    break;
                default:
                    ;
                }

                Token t(TokenType::Identifier, str, keyword);
                output.push_back(t);
                continue;
            }
yy45:
            ++p;
            {
                PUSH_TOKEN1(TokenType::LeftBracket);
                continue;
            }
yy46:
            yyaccept = 4;
            marker = ++p;
yyFillLabel18:
            yych = *p;
            switch (yych) {
            case 0x00:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel18;
                    }
                    goto yy47;
                }
                goto yy85;
            case '\t':
            case '\n':
            case '\v':
            case '\f':
            case '\r':
            case ' ':
                goto yy86;
            default:
                goto yy47;
            }
yy47: {
                PUSH_TOKEN1(TokenType::Backslash);
                continue;
            }
yy48:
            ++p;
            {
                PUSH_TOKEN1(TokenType::RightBracket);
                continue;
            }
yy49:
            ++p;
yyFillLabel19:
            yych = *p;
            switch (yych) {
            case '^':
                goto yy87;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel19;
                    }
                }
                goto yy50;
            }
yy50: {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::BitwiseXor);
                continue;
            }
yy51:
            ++p;
            {
                PUSH_TOKEN1(TokenType::LeftBrace);
                continue;
            }
yy52:
            ++p;
yyFillLabel20:
            yych = *p;
            switch (yych) {
            case '|':
                goto yy88;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel20;
                    }
                }
                goto yy53;
            }
yy53: {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::BitwiseOr);
                continue;
            }
yy54:
            ++p;
            {
                PUSH_TOKEN1(TokenType::RightBrace);
                continue;
            }
yy55:
            ++p;
            {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::BitwiseNot);
                continue;
            }
yy56:
            ++p;
            {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::NE);
                continue;
            }
yy57:
            ++p;
            {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::DoubleHash);
                continue;
            }
yy58:
            ++p;
yyFillLabel21:
            yych = *p;
            switch (yych) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
                goto yy58;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel21;
                    }
                }
                goto yy59;
            }
yy59: {
                std::string digits = std::string(tok + 1, p);
                int value = 0;
                if (!parse_int_from_chars(digits.c_str(), 16, value)) {
                    g_errors.error(ErrorCode::InvalidInteger,
                                   "Invalid hexdecimal integer: " + digits);
                    output.clear();
                    return;
                }

                PUSH_TOKEN2(TokenType::Integer, value);
                continue;
            }
yy60:
            ++p;
yyFillLabel22:
            yych = *p;
            switch (yych) {
            case '"':
                goto yy89;
            case '#':
            case '-':
                goto yy60;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel22;
                    }
                }
                goto yy61;
            }
yy61:
            p = marker;
            switch (yyaccept) {
            case 0:
                goto yy13;
            case 1:
                goto yy29;
            case 2:
                goto yy2;
            case 3:
                goto yy44;
            case 4:
                goto yy47;
            case 5:
                goto yy67;
            case 6:
                goto yy72;
            default:
                goto yy93;
            }
yy62:
            ++p;
yyFillLabel23:
            yych = *p;
            switch (yych) {
            case '0':
            case '1':
                goto yy62;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel23;
                    }
                }
                goto yy63;
            }
yy63: {
                std::string digits = std::string(tok + 1, p);
                int value = 0;
                if (!parse_int_from_chars(digits.c_str(), 2, value)) {
                    g_errors.error(ErrorCode::InvalidInteger,
                                   "Invalid binary integer: " + digits);
                    output.clear();
                    return;
                }

                PUSH_TOKEN2(TokenType::Integer, value);
                continue;
            }
yy64:
            ++p;
            {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::LogicalAnd);
                continue;
            }
yy65:
            ++p;
            {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::Power);
                continue;
            }
yy66:
            yyaccept = 5;
            marker = ++p;
yyFillLabel24:
            yych = *p;
            switch (yych) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                goto yy66;
            case 'E':
            case 'e':
                goto yy90;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel24;
                    }
                }
                goto yy67;
            }
yy67: {
                PUSH_TOKEN2(TokenType::Float, std::stod(str));
                continue;
            }
yy68:
            ++p;
            {
                goto c_comment;
            }
yy69:
            ++p;
            {
                goto eof;
            }
yy70:
            ++p;
yyFillLabel25:
            yych = *p;
            switch (yych) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
                goto yy70;
            case 'H':
            case 'h':
                goto yy74;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel25;
                    }
                }
                goto yy61;
            }
yy71:
            yyaccept = 6;
            marker = ++p;
yyFillLabel26:
            yych = *p;
            switch (yych) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'H':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'h':
                goto yy92;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel26;
                    }
                }
                goto yy72;
            }
yy72: {
                std::string digits = std::string(tok, p - 1);
                int value = 0;
                if (!parse_int_from_chars(digits.c_str(), 2, value)) {
                    g_errors.error(ErrorCode::InvalidInteger,
                                   "Invalid binary integer: " + digits);
                    output.clear();
                    return;
                }

                PUSH_TOKEN2(TokenType::Integer, value);
                continue;
            }
yy73:
            yyaccept = 1;
            marker = ++p;
yyFillLabel27:
            yych = *p;
            switch (yych) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
                goto yy70;
            case 'H':
            case 'h':
                goto yy74;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel27;
                    }
                }
                goto yy29;
            }
yy74:
            ++p;
            {
                std::string digits = std::string(tok, p - 1);
                int value = 0;
                if (!parse_int_from_chars(digits.c_str(), 16, value)) {
                    g_errors.error(ErrorCode::InvalidInteger,
                                   "Invalid hexdecimal integer: " + digits);
                    output.clear();
                    return;
                }

                PUSH_TOKEN2(TokenType::Integer, value);
                continue;
            }
yy75:
            ++p;
yyFillLabel28:
            yych = *p;
            switch (yych) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
                goto yy94;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel28;
                    }
                }
                goto yy61;
            }
yy76:
            yyaccept = 6;
            marker = ++p;
yyFillLabel29:
            yych = *p;
            switch (yych) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
                goto yy70;
            case 'H':
            case 'h':
                goto yy74;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel29;
                    }
                }
                goto yy72;
            }
yy77:
            ++p;
            {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::ShiftLeft);
                continue;
            }
yy78:
            ++p;
            {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::LE);
                continue;
            }
yy79:
            ++p;
            goto yy38;
yy80:
            ++p;
            {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::GE);
                continue;
            }
yy81:
            ++p;
            {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::ShiftRight);
                continue;
            }
yy82:
            ++p;
yyFillLabel30:
            yych = *p;
            switch (yych) {
            case '\'':
                goto yy83;
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
                goto yy82;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel30;
                    }
                }
                goto yy44;
            }
yy83:
            ++p;
            goto yy44;
yy84:
            ++p;
yyFillLabel31:
            yych = *p;
            switch (yych) {
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
                goto yy82;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel31;
                    }
                }
                goto yy61;
            }
yy85:
            ++p;
            {
                Token t(TokenType::Whitespace, " ");
                output.push_back(t);

                p = text_lines_[line_index].c_str();
                pe = p + text_lines_[line_index].size();
                continue;
            }
yy86:
            ++p;
yyFillLabel32:
            yych = *p;
            switch (yych) {
            case 0x00:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel32;
                    }
                    goto yy61;
                }
                goto yy85;
            case '\t':
            case '\n':
            case '\v':
            case '\f':
            case '\r':
            case ' ':
                goto yy86;
            default:
                goto yy61;
            }
yy87:
            ++p;
            {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::LogicalXor);
                continue;
            }
yy88:
            ++p;
            {
                PUSH_TOKEN2(TokenType::Operator,
                            OperatorType::LogicalOr);
                continue;
            }
yy89:
            ++p;
            {
                int value = 0;
                for (const char* i = tok + 2; i < p - 1; ++i) {
                    value *= 2;
                    if (*i == '#') {
                        ++value;
                    }
                }

                PUSH_TOKEN2(TokenType::Integer, value);
                continue;
            }
yy90:
            ++p;
yyFillLabel33:
            yych = *p;
            switch (yych) {
            case '+':
            case '-':
                goto yy96;
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                goto yy97;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel33;
                    }
                }
                goto yy61;
            }
yy91:
            yyaccept = 7;
            marker = ++p;
yyFillLabel34:
            yych = *p;
yy92:
            switch (yych) {
            case '0':
            case '1':
                goto yy91;
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
                goto yy70;
            case 'H':
            case 'h':
                goto yy74;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel34;
                    }
                }
                goto yy93;
            }
yy93: {
                std::string digits = std::string(tok + 2, p);
                int value = 0;
                if (!parse_int_from_chars(digits.c_str(), 2, value)) {
                    g_errors.error(ErrorCode::InvalidInteger,
                                   "Invalid binary integer: " + digits);
                    output.clear();
                    return;
                }

                PUSH_TOKEN2(TokenType::Integer, value);
                continue;
            }
yy94:
            ++p;
yyFillLabel35:
            yych = *p;
            switch (yych) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
                goto yy94;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel35;
                    }
                }
                goto yy95;
            }
yy95: {
                std::string digits = std::string(tok + 2, p);
                int value = 0;
                if (!parse_int_from_chars(digits.c_str(), 16, value)) {
                    g_errors.error(ErrorCode::InvalidInteger,
                                   "Invalid hexdecimal integer: " + digits);
                    output.clear();
                    return;
                }

                PUSH_TOKEN2(TokenType::Integer, value);
                continue;
            }
yy96:
            ++p;
yyFillLabel36:
            yych = *p;
            switch (yych) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                goto yy97;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel36;
                    }
                }
                goto yy61;
            }
yy97:
            ++p;
yyFillLabel37:
            yych = *p;
            switch (yych) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                goto yy97;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel37;
                    }
                }
                goto yy67;
            }
yy98: {
                goto eof;
            }
        }

    }

    // end of input line
eof:
    return;

    // find end of c-comment, possibly reading more lines
c_comment:
    while (true) {
        while (p < pe) {
            if (*p == '*' && (p + 1) < pe && *(p + 1) == '/') {
                p += 2;
                goto main_loop;
            }
            ++p;
        }

        // continue to next line
        if (line_index + 1 >= line_count()) {
            break;
        }

        ++line_index;
        p = text_lines_[line_index].c_str();
        pe = p + text_lines_[line_index].size();
    }

    g_errors.error(ErrorCode::UnterminatedComment);
    output.clear();
    return;

    // parse string literal
string_loop:
    str.clear();
    str_content.clear();
    while (p < pe) {
        tok = p;


        {
            char yych;
yyFillLabel38:
            yych = *p;
            switch (yych) {
            case 0x00:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel38;
                    }
                    goto yy125;
                }
                goto yy100;
            case '"':
                goto yy103;
            case '\'':
                goto yy104;
            case '>':
                goto yy105;
            case '\\':
                goto yy106;
            default:
                goto yy101;
            }
yy100:
            ++p;
            {
                p = pe;
                continue;
            }
yy101:
            ++p;
yy102: {
                str_content.push_back(*tok);
                continue;
            }
yy103:
            ++p;
            {
                if (end_quote == '"') {
                    str = std::string(string_start, p);
                    Token t(TokenType::String, str, str_content);
                    output.push_back(t);
                    goto main_loop;
                }
                else {
                    str_content.push_back(*tok);
                    continue;
                }
            }
yy104:
            ++p;
            {
                if (end_quote == '\'') {
                    if (str_content.size() != 1) {
                        g_errors.error(ErrorCode::InvalidSyntax,
                                       "Invalid quoted character");
                        output.clear();
                        return;
                    }
                    else {
                        str = std::string(string_start, p);
                        Token t(TokenType::Integer, str, str_content[0]);
                        output.push_back(t);
                        goto main_loop;
                    }
                }
                else {
                    str_content.push_back(*tok);
                    continue;
                }
            }
yy105:
            ++p;
            {
                if (end_quote == '>') {
                    str = std::string(string_start, p);
                    Token t(TokenType::String, str, str_content);
                    output.push_back(t);
                    goto main_loop;
                }
                else {
                    str_content.push_back(*tok);
                    continue;
                }
            }
yy106:
            ++p;
yyFillLabel39:
            yych = *p;
            switch (yych) {
            case '\n':
                goto yy102;
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
                goto yy109;
            case 'a':
                goto yy111;
            case 'b':
                goto yy112;
            case 'e':
                goto yy113;
            case 'f':
                goto yy114;
            case 'n':
                goto yy115;
            case 'r':
                goto yy116;
            case 't':
                goto yy117;
            case 'v':
                goto yy118;
            case 'x':
                goto yy119;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel39;
                    }
                    goto yy102;
                }
                goto yy107;
            }
yy107:
            ++p;
yy108: {
                if (raw_strings) {
                    str_content.push_back(*tok);
                    p = tok + 1;
                }
                else {
                    str_content.push_back(tok[1]);
                }
                continue;
            }
yy109:
            ++p;
yyFillLabel40:
            yych = *p;
            switch (yych) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
                goto yy120;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel40;
                    }
                }
                goto yy110;
            }
yy110: {
                if (raw_strings) {
                    str_content.push_back(*tok);
                    p = tok + 1;
                }
                else {
                    std::string digits = std::string(tok + 1, p);
                    int value = 0;
                    if (!parse_int_from_chars(digits.c_str(), 8, value)) {
                        g_errors.error(ErrorCode::InvalidInteger,
                                       "Invalid octal integer: " + digits);
                        output.clear();
                        return;
                    }

                    str_content.push_back(static_cast<char>(value));
                }
                continue;
            }
yy111:
            ++p;
            {
                if (raw_strings) {
                    str_content.push_back(*tok);
                    p = tok + 1;
                }
                else {
                    str_content.push_back('\a');
                }
                continue;
            }
yy112:
            ++p;
            {
                if (raw_strings) {
                    str_content.push_back(*tok);
                    p = tok + 1;
                }
                else {
                    str_content.push_back('\b');
                }
                continue;
            }
yy113:
            ++p;
            {
                if (raw_strings) {
                    str_content.push_back(*tok);
                    p = tok + 1;
                }
                else {
                    str_content.push_back('\x1B');
                }
                continue;
            }
yy114:
            ++p;
            {
                if (raw_strings) {
                    str_content.push_back(*tok);
                    p = tok + 1;
                }
                else {
                    str_content.push_back('\f');
                }
                continue;
            }
yy115:
            ++p;
            {
                if (raw_strings) {
                    str_content.push_back(*tok);
                    p = tok + 1;
                }
                else {
                    str_content.push_back('\n');
                }
                continue;
            }
yy116:
            ++p;
            {
                if (raw_strings) {
                    str_content.push_back(*tok);
                    p = tok + 1;
                }
                else {
                    str_content.push_back('\r');
                }
                continue;
            }
yy117:
            ++p;
            {
                if (raw_strings) {
                    str_content.push_back(*tok);
                    p = tok + 1;
                }
                else {
                    str_content.push_back('\t');
                }
                continue;
            }
yy118:
            ++p;
            {
                if (raw_strings) {
                    str_content.push_back(*tok);
                    p = tok + 1;
                }
                else {
                    str_content.push_back('\v');
                }
                continue;
            }
yy119:
            ++p;
yyFillLabel41:
            yych = *p;
            switch (yych) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
                goto yy121;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel41;
                    }
                }
                goto yy108;
            }
yy120:
            ++p;
yyFillLabel42:
            yych = *p;
            switch (yych) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
                goto yy123;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel42;
                    }
                }
                goto yy110;
            }
yy121:
            ++p;
yyFillLabel43:
            yych = *p;
            switch (yych) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
                goto yy124;
            default:
                if (pe <= p) {
                    if (YYFILL() == 0) {
                        goto yyFillLabel43;
                    }
                }
                goto yy122;
            }
yy122: {
                if (raw_strings) {
                    str_content.push_back(*tok);
                    p = tok + 1;
                }
                else {
                    std::string digits = std::string(tok + 2, p);
                    int value = 0;
                    if (!parse_int_from_chars(digits.c_str(), 16, value)) {
                        g_errors.error(ErrorCode::InvalidInteger,
                                       "Invalid hexadecimal integer: " + digits);
                        output.clear();
                        return;
                    }

                    str_content.push_back(static_cast<char>(value));
                }
                continue;
            }
yy123:
            ++p;
            goto yy110;
yy124:
            ++p;
            goto yy122;
yy125: {
                p = pe;
                continue;
            }
        }

    }

    g_errors.error(ErrorCode::UnterminatedString);
    output.clear();
    return;
}
