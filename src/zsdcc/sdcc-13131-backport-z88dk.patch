Index: ChangeLog
===================================================================
--- ChangeLog	(revision 13131)
+++ ChangeLog	(working copy)
@@ -1,3 +1,18 @@
+2022-06-01 Philipp Klaus Krause <krauseph AT informatik.uni-freiburg.de>
+
+	* src/SDCCast.c:
+	  Add an assertion to show the underlying issue of bug #3401.
+
+2022-05-13 Philipp Klaus Krause <krauseph AT informatik.uni-freiburg.de>
+
+	* src/z80/gen.c:
+	  Fix bug #3388.
+
+2022-03-28 Philipp Klaus Krause <krauseph AT informatik.uni-freiburg.de>
+
+	* src/z80/ralloc2.cc:
+	  Fix code generation issues in use of iy.
+
 2022-02-26 Philipp Klaus Krause <krauseph@informatik.uni-freiburg.de>
 
 	* src/SDCCsymt.c,
@@ -48206,4 +48221,4 @@
 	* as/mcs51/lklex.c:  accept everything as symbol name in rel-files, bug fix ID 452601
 	* as/mcs51/lksym.c:  accept everything as symbol name in rel-files, bug fix ID 452601
 
-$Revision: 13081 $
+$Revision: 13131 $
Index: src/SDCCasm.c
===================================================================
--- src/SDCCasm.c	(revision 13131)
+++ src/SDCCasm.c	(working copy)
@@ -403,8 +403,8 @@
 static const ASM_MAPPING _asxxxx_mapping[] = {
   {"labeldef", "%s::"},
   {"slabeldef", "%s:"},
-  {"tlabeldef", "%05d$:"},
-  {"tlabel", "%05d$"},
+  {"tlabeldef", "l%N_%05d$:"},
+  {"tlabel", "l%N_%05d$"},
   {"immed", "#"},
   {"zero", "#0x00"},
   {"one", "#0x01"},
@@ -427,6 +427,7 @@
   {"msbimmeds", "#>(%s)"},
   {"module", ".module %s"},
   {"global", ".globl %s"},
+  {"extern", ".globl %s"},
   {"fileprelude", ""},
   {"functionheader",
    "; ---------------------------------\n"
Index: src/SDCCast.c
===================================================================
--- src/SDCCast.c	(revision 13131)
+++ src/SDCCast.c	(working copy)
@@ -4086,6 +4086,7 @@
           !IS_CHAR (RTYPE (tree)) &&
           IS_CHAR(LTYPE(tree)))
         {
+          wassert (tree->right->type == EX_VALUE);
           unsigned long litval = AST_ULONG_VALUE (tree->right); 
           if ((litval >= 0) && (litval <= 255) && reduceTypeAllowed)
             {
Index: src/SDCCgen.c
===================================================================
--- src/SDCCgen.c	(revision 13131)
+++ src/SDCCgen.c	(working copy)
@@ -230,13 +230,17 @@
           break;
 
         case ':':
-          /* Add \n for labels, not dirs such as c:\mydir */
-          if (!inComment && !inLiteral && !inLiteralString && (isspace ((unsigned char) bp[1])))
+          /* Add \n for labels, not dirs such as c:\mydir, not local direct assignment =: */
+          if (!inComment && !inLiteral && !inLiteralString && (isspace ((unsigned char) bp[1])) && (*(bp-1) != '='))
             {
               ++bp;
               *bp = '\0';
               ++bp;
+              /* Don't emit leading whitespaces */
+              while (isspace (*begin))
+                ++begin;
               emitcode (begin, NULL);
+              genLine.lineCurr->isLabel = 1;
               begin = bp;
             }
           else
Index: src/SDCCglue.c
===================================================================
--- src/SDCCglue.c	(revision 13131)
+++ src/SDCCglue.c	(working copy)
@@ -195,7 +195,7 @@
            (sym->_isparm && !IS_REGPARM (sym->etype) && !IS_STATIC (sym->localof->etype))) &&
           addPublics &&
           !IS_STATIC (sym->etype) &&
-          (IS_FUNC (sym->type) ? (sym->used || IFFUNC_HASBODY (sym->type)) : (!IS_EXTERN (sym->etype) || sym->ival)) &&
+          (IS_FUNC (sym->type) ? (IFFUNC_HASBODY (sym->type)) : (!IS_EXTERN (sym->etype) || sym->ival)) &&
           !(IFFUNC_ISINLINE (sym->type) && !IS_STATIC (sym->etype) && !IS_EXTERN (sym->etype)))
         {
           addSetHead (&publics, sym);
@@ -371,11 +371,15 @@
               emitDebugSym (&map->oBuf, sym);
               dbuf_printf (&map->oBuf, "==.\n");
             }
-          if (IS_STATIC (sym->etype) || sym->level)
-            dbuf_tprintf (&map->oBuf, "!slabeldef\n", sym->rname);
-          else
-            dbuf_tprintf (&map->oBuf, "!labeldef\n", sym->rname);
-          dbuf_tprintf (&map->oBuf, "\t!ds\n", (unsigned int) size & 0xffff);
+          if (!IS_EXTERN (sym->etype))
+            {
+              if (IS_STATIC (sym->etype) || sym->level)
+                dbuf_tprintf (&map->oBuf, "!slabeldef\n", sym->rname);
+              else
+                dbuf_tprintf (&map->oBuf, "!labeldef\n", sym->rname);
+
+              dbuf_tprintf (&map->oBuf, "\t!ds\n", (unsigned int) size & 0xffff);
+            }
         }
 
       sym->ival = NULL;
@@ -1899,9 +1903,12 @@
   /* for all variables in this segment do */
   for (sym = setFirstItem (map->syms); sym; sym = setNextItem (map->syms))
     {
-      /* if it is "extern" then do nothing */
+      /* if it is "extern" then add to the extern table */
       if (IS_EXTERN (sym->etype) && !sym->ival)
-        continue;
+        {
+          addSetHead (&externs, sym);
+          continue;
+        }
 
       /* eliminate redundant __str_%d (generated in stringToSymbol(), SDCCast.c) */
       if (!isinSet (tmpSet, sym))
@@ -2079,7 +2086,11 @@
 void
 flushStatics (void)
 {
+  if (options.const_seg)
+      dbuf_tprintf (&code->oBuf, "\t!area\n", options.const_seg);
   emitStaticSeg (statsg, codeOutBuf);
+  if (options.const_seg)
+      dbuf_tprintf(&code->oBuf, "\t!areacode\n", options.code_seg);
   statsg->syms = NULL;
 }
 
Index: src/SDCCmain.c
===================================================================
--- src/SDCCmain.c	(revision 13131)
+++ src/SDCCmain.c	(working copy)
@@ -519,18 +519,15 @@
 void
 printVersionInfo (FILE * stream)
 {
-  int i;
-
-  fprintf (stream, "SDCC : ");
-  for (i = 0; i < NUM_PORTS; i++)
-    fprintf (stream, "%s%s", i == 0 ? "" : "/", _ports[i]->target);
-
-  fprintf (stream, " " SDCC_VERSION_STR
+  fprintf(stream, "\nZSDCC IS A MODIFICATION OF SDCC FOR Z88DK\n");
+  fprintf(stream, "Build: " SDCC_VERSION_STR
 #ifdef SDCC_SUB_VERSION_STR
-           "/" SDCC_SUB_VERSION_STR
+    "/" SDCC_SUB_VERSION_STR
 #endif
-           " #%s (%s)\n", getBuildNumber (), getBuildEnvironment ());
-  fprintf (stream, "published under GNU General Public License (GPL)\n");
+    " #%s (%s) " __DATE__ "\n\n", getBuildNumber(), getBuildEnvironment());
+  fprintf(stream, "sdcc website:\nhttps://sourceforge.net/projects/sdcc/\n\n");
+  fprintf(stream, "patch details:\nhttps://github.com/z88dk/z88dk/blob/master/src/zsdcc/sdcc-z88dk.patch\n\n");
+  fprintf(stream, "published under GNU General Public License (GPL)\n");
 }
 
 static void
Index: src/SDCCopt.c
===================================================================
--- src/SDCCopt.c	(revision 13131)
+++ src/SDCCopt.c	(working copy)
@@ -1016,7 +1016,7 @@
       /* TODO: Eliminate it, convert any SEND of volatile into DUMMY_READ_VOLATILE. */
       /* For now just convert back to call to make sure any volatiles are read. */
 
-      strcpy(OP_SYMBOL (IC_LEFT (icc))->rname, !strcmp (bif->name, "__builtin_memcpy") ? "___memcpy" : (!strcmp (bif->name, "__builtin_strncpy") ? "_strncpy" : "_memset"));
+      strcpy(OP_SYMBOL (IC_LEFT (icc))->rname, !strcmp (bif->name, "__builtin_memcpy") ? "_memcpy" : (!strcmp (bif->name, "__builtin_strncpy") ? "_strncpy" : "_memset"));
       goto convert;
     }
 
@@ -1026,7 +1026,7 @@
       if (bitVectIsZero (OP_USES (IC_RESULT (icc))) && (IS_OP_LITERAL (IC_LEFT (lastparam)) || !strcmp (bif->name, "__builtin_memcpy")))
         return;
 
-      strcpy(OP_SYMBOL (IC_LEFT (icc))->rname, !strcmp (bif->name, "__builtin_memcpy") ? "___memcpy" : (!strcmp (bif->name, "__builtin_strncpy") ? "_strncpy" : "_memset"));
+      strcpy(OP_SYMBOL (IC_LEFT (icc))->rname, !strcmp (bif->name, "__builtin_memcpy") ? "_memcpy" : (!strcmp (bif->name, "__builtin_strncpy") ? "_strncpy" : "_memset"));
       goto convert;
     }
 
@@ -2166,10 +2166,11 @@
   int i;
   int change = 0;
   iCode *ic, *newic;
-  iCode *uic, *skipuic;
+  iCode *uic, *lic, *ric, *skipuic;
   sym_link *nextresulttype;
   symbol *sym;
   int resultsize, nextresultsize;
+  unsigned long litval;
 
   // Wide loop counter
   for (i = 0; i < count; i++)
@@ -2366,8 +2367,8 @@
               continue;
             }
 
-          iCode *lic = IS_ITEMP (left) ? hTabItemWithKey (iCodehTab, bitVectFirstBit (OP_DEFS (left))) : 0;
-          iCode *ric = IS_ITEMP (right) ? hTabItemWithKey (iCodehTab, bitVectFirstBit (OP_DEFS (right))) : 0;
+          lic = IS_ITEMP (left) ? hTabItemWithKey (iCodehTab, bitVectFirstBit (OP_DEFS (left))) : 0;
+          ric = IS_ITEMP (right) ? hTabItemWithKey (iCodehTab, bitVectFirstBit (OP_DEFS (right))) : 0;
 
           if (lic)
             {
@@ -2374,7 +2375,7 @@
               if (lic->op != BITWISEAND || !IS_OP_LITERAL (IC_LEFT (lic)) && !IS_OP_LITERAL (IC_RIGHT (lic)))
                 continue;
 
-              unsigned long litval = operandLitValue (IS_OP_LITERAL (IC_LEFT (lic)) ? IC_LEFT (lic) : IC_RIGHT (lic));
+              litval = operandLitValue (IS_OP_LITERAL (IC_LEFT (lic)) ? IC_LEFT (lic) : IC_RIGHT (lic));
 
               if (litval > 0x7f)
                 continue;
@@ -2387,7 +2388,7 @@
               if (ric->op != BITWISEAND || !IS_OP_LITERAL (IC_LEFT (ric)) && !IS_OP_LITERAL (IC_RIGHT (ric)))
                 continue;
 
-              unsigned long litval = operandLitValue (IS_OP_LITERAL (IC_LEFT (ric)) ? IC_LEFT (ric) : IC_RIGHT (ric));
+              litval = operandLitValue (IS_OP_LITERAL (IC_LEFT (ric)) ? IC_LEFT (ric) : IC_RIGHT (ric));
 
               if (litval > 0x7f)
                 continue;
Index: src/z80/gen.c
===================================================================
--- src/z80/gen.c	(revision 13131)
+++ src/z80/gen.c	(working copy)
@@ -10163,7 +10163,8 @@
             }
           /* Non-destructive and when exactly one bit per byte is set. */
           else if (isLiteralBit (bytelit) >= 0 &&
-            (left->aop->type == AOP_STK || aopInReg (left->aop, 0, A_IDX) || left->aop->type == AOP_HL || left->aop->type == AOP_IY || left->aop->type == AOP_REG && left->aop->aopu.aop_reg[0]->rIdx != IYL_IDX))
+            (left->aop->type == AOP_STK || aopInReg (left->aop, offset, A_IDX) || left->aop->type == AOP_HL || left->aop->type == AOP_IY ||
+              left->aop->type == AOP_REG && !aopInReg (left->aop, offset, IYL_IDX) && !aopInReg (left->aop, offset, IYH_IDX)))
             {
               if (requiresHL (left->aop) && left->aop->type != AOP_REG)
                 _push (PAIR_HL);
@@ -10279,8 +10280,8 @@
               i = end;
               continue;
             }
-          else if (isLiteralBit (~bytelit & 0xffu) >= 0 &&
-            (result->aop->type == AOP_REG || left == right && (result->aop->type == AOP_STK || result->aop->type == AOP_DIR)))
+          else if (isLiteralBit (~bytelit & 0xffu) >= 0 && aopSame (result->aop, i, left->aop, i, 1) &&
+            (result->aop->type == AOP_STK || result->aop->type == AOP_DIR || result->aop->type == AOP_REG && !aopInReg (result->aop, i, IYL_IDX) && !aopInReg (result->aop, i, IYH_IDX)))
             {
               cheapMove (result->aop, i, left->aop, i, a_free);
               if (!regalloc_dry_run)
@@ -10551,8 +10552,8 @@
               i = end;
               continue;
             }
-          else if (isLiteralBit (bytelit) >= 0 &&
-            (result->aop->type == AOP_REG || left == right && (result->aop->type == AOP_STK || result->aop->type == AOP_DIR)))
+          else if (isLiteralBit (bytelit) >= 0 && aopSame (result->aop, i, left->aop, i, 1) &&
+            (result->aop->type == AOP_STK || result->aop->type == AOP_DIR || result->aop->type == AOP_REG && !aopInReg (result->aop, i, IYL_IDX) && !aopInReg (result->aop, i, IYH_IDX)))
             {
               cheapMove (result->aop, i, left->aop, i, a_free);
               if (!regalloc_dry_run)
Index: src/z80/main.c
===================================================================
--- src/z80/main.c	(revision 13131)
+++ src/z80/main.c	(working copy)
@@ -1114,7 +1114,7 @@
     1                           /* No fancy alignments supported. */
   },
   { NULL, NULL },
-  1,                            /* ABI revision */
+  0,                            /* ABI revision */
   { -1, 0, 0, 4, 0, 3, 0 },
   { 
     -1,                         /* shifts never use support routines */
@@ -1246,7 +1246,7 @@
     1                           /* No fancy alignments supported. */
   },
   { NULL, NULL },
-  1,                            /* ABI revision */
+  0,                            /* ABI revision */
   { -1, 0, 0, 4, 0, 3, 0 },
   { -1, FALSE },
   { z80_emitDebuggerSymbol },
@@ -1763,7 +1763,7 @@
     1                           /* No fancy alignments supported. */
   },
   { NULL, NULL },
-  1,                            /* default ABI revision */
+  0,                            /* ABI revision */
   { -1, 0, 0, 2, 0, 4, 0 },
   { -1, FALSE },
   { z80_emitDebuggerSymbol },
@@ -2150,7 +2150,7 @@
     1                           /* No fancy alignments supported. */
   },
   { NULL, NULL },
-  1,                            /* ABI revision */
+  0,                            /* ABI revision */
   { -1, 0, 0, 4, 0, 3, 0 },
   { -1, FALSE },
   { z80_emitDebuggerSymbol },
Index: src/z80/peep.c
===================================================================
--- src/z80/peep.c	(revision 13131)
+++ src/z80/peep.c	(working copy)
@@ -165,6 +165,88 @@
   return(found && found < end);
 }
 
+/* z88dk special functions with register parameters listed */
+static char *special_funcs[][3] = {
+/* [0] = call function name, [1] = input registers, [2] = preserved registers */
+  {"call\t____sdcc_ll_copy_src_hlsp_dst_de", "dehl", "ay"},
+  {"call\t____sdcc_ll_copy_src_de_dst_hlsp", "dehl", "ay"},
+  {"call\t____sdcc_ll_add_deix_hlix", "dehl", "bcy"},
+  {"call\t____sdcc_ll_sub_deix_hlix", "dehl", "bcy"},
+  {"call\t____sdcc_ll_push_hlix", "hl", "bcy"},
+  {"call\t____sdcc_ll_copy_src_hlsp_dst_deixm", "dehl", "ay"},
+  {"call\t____sdcc_ll_copy_src_deixm_dst_hlsp", "dehl", "ay"},
+  {"call\t____sdcc_ll_asr_hlix_a", "ahl", "y"},
+  {"call\t____sdcc_ll_lsr_hlix_a", "ahl", "y"},
+  {"call\t____sdcc_ll_lsl_hlix_a", "ahl", "y"},
+  {"call\t____sdcc_ll_push_mhl", "hl", "bcy"},
+  {"call\t____sdcc_ll_copy_src_deix_dst_hl", "dehl", "ay"},
+  {"call\t____sdcc_ll_add_deix_bc_hl", "bcdehl", "y"},
+  {"call\t____sdcc_ll_sub_deix_bc_hl", "bcdehl", "y"},
+  {"call\t____sdcc_ll_copy_src_desp_dst_hlsp", "dehl", "ay"},
+  {"call\t____sdcc_ll_copy_src_de_dst_hlix", "dehl", "ay"},
+  {"call\t____sdcc_ll_add_de_bc_hl", "bcdehl", "y"},
+  {"call\t____sdcc_ll_sub_de_bc_hl", "bcdehl", "y"},
+  {"call\t____sdcc_ll_copy_src_hl_dst_de", "dehl", "ay"},
+  {"call\t____sdcc_ll_asr_mbc_a", "abc", "y"},
+  {"call\t____sdcc_ll_lsl_mbc_a", "abc", "y"},
+  {"call\t____sdcc_ll_lsr_mbc_a", "abc", "y"},
+  {"call\t____sdcc_ll_add_hlix_deix_bcix", "bcdehl", "y"},
+  {"call\t____sdcc_ll_sub_hlix_deix_bcix", "bcdehl", "y"},
+  {"call\t____sdcc_ll_copy_src_deix_dst_hlix", "dehl", "ay"},
+  {"call\t____sdcc_ll_add_hlix_bc_deix", "bcdehl", "y"},
+  {"call\t____sdcc_ll_sub_hlix_bc_deix", "bcdehl", "y"},
+  {"call\t____sdcc_ll_add_hlix_deix_bc", "bcdehl", "y"},
+  {"call\t____sdcc_ll_sub_hlix_deix_bc", "bcdehl", "y"},
+  {"call\t____sdcc_ll_add_de_hlix_bcix", "bcdehl", "y"},
+  {"call\t____sdcc_ll_sub_de_hlix_bcix", "bcdehl", "y"},
+  {"call\t____sdcc_ll_add_de_bc_hlix", "bcdehl", "y"},
+  {"call\t____sdcc_ll_sub_de_bc_hlix", "bcdehl", "y"},
+  {"call\t____sdcc_ll_add_de_hlix_bc", "bcdehl", "y"},
+  {"call\t____sdcc_ll_sub_de_hlix_bc", "bcdehl", "y"},
+  {"call\t____sdcc_cpu_push_di", "", "bcdehly"},
+  {"call\t____sdcc_cpu_pop_ei", "", "bcdehly"},
+  {"call\t____sdcc_lib_setmem_hl", "ahl", "abcdey"},
+  {"call\t____sdcc_load_debc_deix", "de", "ahly"},
+  {"call\t____sdcc_load_dehl_deix", "de", "bcy"},
+  {"call\t____sdcc_load_debc_mhl", "hl", "ay"},
+  {"call\t____sdcc_load_hlde_mhl", "hl", "bcy"},
+  {"call\t____sdcc_4_copy_src_mhl_dst_deix", "dehl", "bcy"},
+  {"call\t____sdcc_4_copy_src_mhl_dst_bcix", "bchl", "bcdey"},
+  {"call\t____sdcc_4_copy_src_mhl_dst_mbc", "bchl", "dey"},
+  {"call\t____sdcc_4_push_hlix", "hl", "bcdey"},
+  {"call\t____sdcc_4_push_mhl", "hl", "bcdey"},
+  {"call\t____sdcc_store_debc_hlix", "bcdehl", "abcdey"},
+  {"call\t____sdcc_store_debc_mhl", "bcdehl", "abcdey"},
+  {"call\t____sdcc_store_dehl_bcix", "bcdehl", "adehly"},
+  {"call\t____sdcc_2_copy_src_mhl_dst_deix", "dehl", "bcy"},
+  {"call\t____sdcc_2_copy_src_mhl_dst_bcix", "bchl", "debcy"},
+  {"call\t____sdcc_4_ldi_nosave_bc", "dehl", "y"},
+  {"call\t____sdcc_4_ldi_save_bc", "dehl", "bcy"},
+  {"call\t____sdcc_outi_128", "bchl", "acdey"},
+  {"call\t____sdcc_outi_256", "bchl", "acdey"},
+  {"call\t____sdcc_outi", "bchl", "acdey"},
+  {"call\t____sdcc_ldi_128", "bcdehl", "ay"},
+  {"call\t____sdcc_ldi_256", "bcdehl", "ay"},
+  {"call\t____sdcc_ldi", "bcdehl", "ay"},
+  {"call\t____sdcc_4_copy_srcd_hlix_dst_deix","dehl","y" },
+  {"call\t____sdcc_4_and_src_mbc_mhl_dst_deix","bcdehl","y" },
+  {"call\t____sdcc_4_or_src_mbc_mhl_dst_deix","bcdehl","y" },
+  {"call\t____sdcc_4_xor_src_mbc_mhl_dst_deix","bcdehl","y" },
+  {"call\t____sdcc_4_or_src_dehl_dst_bcix","bcdehl","dehly" },
+  {"call\t____sdcc_4_xor_src_dehl_dst_bcix","bcdehl","dehly" },
+  {"call\t____sdcc_4_and_src_dehl_dst_bcix","bcdehl","dehly" },
+  {"call\t____sdcc_4_xor_src_mbc_mhl_dst_debc","bcdehl","y" },
+  {"call\t____sdcc_4_or_src_mbc_mhl_dst_debc","bcdehl","y" },
+  {"call\t____sdcc_4_and_src_mbc_mhl_dst_debc","bcdehl","y" },
+  {"call\t____sdcc_4_cpl_src_mhl_dst_debc","hl","y" },
+  {"call\t____sdcc_4_xor_src_debc_mhl_dst_debc","bcdehl","y" },
+  {"call\t____sdcc_4_or_src_debc_mhl_dst_debc","bcdehl","y" },
+  {"call\t____sdcc_4_and_src_debc_mhl_dst_debc","bcdehl","y" },
+  {"call\t____sdcc_4_and_src_debc_hlix_dst_debc","bcdehl","y" },
+  {"call\t____sdcc_4_or_src_debc_hlix_dst_debc","bcdehl","y" },
+  {"call\t____sdcc_4_xor_src_debc_hlix_dst_debc","bcdehl","y" }
+};
+
 static bool
 z80MightBeParmInCallFromCurrentFunction(const char *what)
 {
@@ -332,6 +414,8 @@
 static bool
 z80MightRead(const lineNode *pl, const char *what)
 {
+  int i;
+
   if(strcmp(what, "iyl") == 0 || strcmp(what, "iyh") == 0)
     what = "iy";
   if(strcmp(what, "ixl") == 0 || strcmp(what, "ixh") == 0)
@@ -340,6 +424,16 @@
   if(ISINST(pl->line, "call") && strcmp(what, "sp") == 0)
     return TRUE;
 
+  /* look for z88dk special functions */
+  if (strstr(pl->line, "call\t____sdcc") != 0)
+  {
+    for (i = 0; i < sizeof(special_funcs) / (3 * sizeof(char *)); ++i)
+      {
+        if (strstr(pl->line, special_funcs[i][0]) != 0)
+          return (strchr(special_funcs[i][1], (what[1] == '\0') ? what[0] : what[1]) != 0);
+      }
+  }
+
   if(strcmp(pl->line, "call\t__initrleblock") == 0 && (strchr(what, 'd') != 0 || strchr(what, 'e') != 0))
     return TRUE;
 
@@ -785,6 +879,7 @@
     return(true);
   if(ISINST(pl->line, "call") && strchr(pl->line, ',') == 0)
     {
+      int i;
       const symbol *f = findSym (SymbolTab, 0, pl->line + 6);
       const bool *preserved_regs;
 
@@ -791,6 +886,16 @@
       if(!strcmp(what, "ix"))
         return(false);
 
+      /* z88dk special functions */
+      if(!f && (strstr(pl->line, "call\t____sdcc") != 0))
+        {
+           for (i = 0; i < sizeof(special_funcs) / (3*sizeof(char *)); ++i)
+             {
+                if (strstr(pl->line, special_funcs[i][0]) != 0)
+                  return (strchr(special_funcs[i][2], (what[1] == '\0') ? what[0] : what[1]) == 0);
+             }
+        }
+
       if(f)
           preserved_regs = f->type->funcAttrs.preserved_regs;
       else // Err on the safe side.
Index: src/z80/ralloc2.cc
===================================================================
--- src/z80/ralloc2.cc	(revision 13131)
+++ src/z80/ralloc2.cc	(working copy)
@@ -1001,6 +1001,13 @@
   bool result_in_IYH = operand_in_reg(result, REG_IYH, ia, i, G);
   bool result_in_IY = result_in_IYL || result_in_IYH;
 
+  const cfg_dying_t &dying = G[i].dying;
+
+  bool dead_IYL = result_in_IYL || unused_IYL || dying.find(ia.registers[REG_IYL][1]) != dying.end() || dying.find(ia.registers[REG_IYL][0]) != dying.end();
+  bool dead_IYH = result_in_IYH || unused_IYH || dying.find(ia.registers[REG_IYH][1]) != dying.end() || dying.find(ia.registers[REG_IYH][0]) != dying.end();
+
+  bool dead_IY = dead_IYL && dead_IYH;
+
   bool input_in_IYL, input_in_IYH;
   switch(ic->op)
     {
@@ -1019,13 +1026,6 @@
     }
   bool input_in_IY = input_in_IYL || input_in_IYH;
 
-  //const std::set<var_t> &dying = G[i].dying;
-  
-  //bool dying_IYL = result_in_IYL || dying.find(ia.registers[REG_IYL][1]) != dying.end() || dying.find(ia.registers[REG_IYL][0]) != dying.end();
-  //bool dying_IYH = result_in_IYH || dying.find(ia.registers[REG_IYH][1]) != dying.end() || dying.find(ia.registers[REG_IYH][0]) != dying.end();
-
-  //bool result_only_IY = (result_in_IYL || unused_IYL || dying_IYL) && (result_in_IYH || unused_IYH || dying_IYH);
-
   if(unused_IYL && unused_IYH)
     return(true); // Register IY not in use.
 
@@ -1038,7 +1038,6 @@
   // Some instructions can handle anything.
   if(ic->op == IPUSH || ic->op == CALL ||
     ic->op == '+' ||
-    ic->op == '|' ||
     ic->op == GETBYTE || ic->op == GETWORD || ic->op == SWAP && (getSize(operandType(IC_RESULT (ic))) == 1 || operand_in_reg(result, ia, i, G)) ||
     ic->op == '=' && !POINTER_SET(ic) ||
     ic->op == CAST ||
@@ -1045,6 +1044,7 @@
     ic->op == SEND)
     return(true);
 
+  // Avoid overwriting operand in iy by use of iy as pointer reg to global operand.
   if(!result_in_IY && !input_in_IY &&
     !(IC_RESULT(ic) && isOperandInDirSpace(IC_RESULT(ic))) &&
     !(IC_RIGHT(ic) && IS_TRUE_SYMOP(IC_RIGHT(ic))) &&
@@ -1051,6 +1051,16 @@
     !(IC_LEFT(ic) && IS_TRUE_SYMOP(IC_LEFT(ic))))
     return(true);
 
+  // Some instructions can handle anything if no operand is pointed to by iy.
+  if((!(IC_RESULT(ic) && isOperandInDirSpace(IC_RESULT(ic))) || dead_IY && getSize(operandType(IC_RESULT (ic))) == 1) &&
+    !(IC_RIGHT(ic) && IS_TRUE_SYMOP(IC_RIGHT(ic))) &&
+    !(IC_LEFT(ic) && IS_TRUE_SYMOP(IC_LEFT(ic))) &&
+    (ic->op == '|' ||
+    ic->op == '^' ||
+    ic->op == '~' ||
+    ic->op == BITWISEAND))
+    return(true);
+
   // Code generator mostly cannot handle variables that are only partially in IY.
   if(unused_IYL ^ unused_IYH)
     return(false);
@@ -1070,16 +1080,6 @@
   if(ia.registers[REG_IYL][0] >= 0 && I[ia.registers[REG_IYL][0]].byte != 0 || ia.registers[REG_IYH][0] >= 0 && I[ia.registers[REG_IYH][0]].byte != 1)
     return(false);
 
-#if 0
-  if(ic->key == 32)
-    {
-      std::cout << "A IYinst_ok: Assignment: ";
-      //print_assignment(a);
-      std::cout << "\n";
-      std::cout << "2IYinst_ok: at (" << i << ", " << ic->key << ")\nIYL = (" << ia.registers[REG_IYL][0] << ", " << ia.registers[REG_IYL][1] << "), IYH = (" << ia.registers[REG_IYH][0] << ", " << ia.registers[REG_IYH][1] << ")inst " << i << ", " << ic->key << "\n";
-    }
-#endif
-
   if(result_in_IY &&
     (ic->op == '-' || ic->op == UNARYMINUS)) // todo: More instructions that can write iy.
     return(true);
