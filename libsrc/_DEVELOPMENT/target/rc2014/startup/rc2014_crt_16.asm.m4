include(`z88dk.m4')

dnl############################################################
dnl##  RC2014_CRT_16.ASM.M4 - 8085 UART INDEPENDENT OF BASIC ##
dnl############################################################
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;               RC2014 8085 standalone target               ;;
;;  generated by target/rc2014/startup/rc2014_crt_16.asm.m4  ;;
;;                                                           ;;
;;                  flat 64k address space                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GLOBAL SYMBOLS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

include "config_rc2014-8085_public.inc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CRT AND CLIB CONFIGURATION ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

include "../crt_defaults.inc"
include "../crt_defaults_8085.inc"
include "crt_config.inc"
include(`../crt_rules.inc')
include(`rc2014_rules.inc')

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CLASSIC CRT AND CLIB CONFIGURATION ;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; By default we want to have stdio working for us
IFNDEF CRT_ENABLE_STDIO
    defc CRT_ENABLE_STDIO = 1
ENDIF

PUBLIC  fgetc_cons
EXTERN  fgetc_cons_uarta

    defc DEFINED_fgetc_cons = 1
    defc fgetc_cons = fgetc_cons_uarta

PUBLIC  fputc_cons
EXTERN  fputc_cons_uarta

    defc DEFINED_fputc_cons = 1
    defc fputc_cons = fputc_cons_uarta

PUBLIC __CRT_KEY_DEL
IFDEF CRT_KEY_DEL
    defc __CRT_KEY_DEL = CRT_KEY_DEL
ELSE
    defc __CRT_KEY_DEL = 8
ENDIF

PUBLIC __CRT_KEY_CAPS_LOCK
IFDEF CRT_KEY_CAPS_LOCK
    defc __CRT_KEY_CAPS_LOCK  = CRT_KEY_CAPS_LOCK
ELSE
    defc __CRT_KEY_CAPS_LOCK = 6
ENDIF

; When using the firmware printer we may need to disable the soft
; cursor created by fgets_cons()
PUBLIC __CLIB_DISABLE_FGETS_CURSOR
IFDEF CLIB_DISABLE_FGETS_CURSOR
    defc __CLIB_DISABLE_FGETS_CURSOR = CLIB_DISABLE_FGETS_CURSOR
ELSE
    defc __CLIB_DISABLE_FGETS_CURSOR = 0
ENDIF

; Delay when entering fgetc_cons()
; 50ms stops rogue repeats nicely, but may need tuning
PUBLIC __CLIB_FGETC_CONS_DELAY
IFDEF CLIB_FGETC_CONS_DELAY
    defc __CLIB_FGETC_CONS_DELAY = CLIB_FGETC_CONS_DELAY
ELSE
    defc __CLIB_FGETC_CONS_DELAY = 50
ENDIF

; Delay when kbhit/getch() returns a cached key press
; Delaying slightly means that typing is possible
PUBLIC __CLIB_KBHIT_DELAY
IFDEF CLIB_KBHIT_DELAY
    defc __CLIB_KBHIT_DELAY = CLIB_KBHIT_DELAY
ELSE
    defc __CLIB_KBHIT_DELAY = 0
ENDIF

; If 32 bit floats are defined, then we need to indicate to the library
; that they are in use (mainly for printf/scanf)
PUBLIC CLIB_32BIT_FLOATS
IF !DEFINED_CLIB_32BIT_FLOATS
    defc CLIB_32BIT_FLOATS = 0
ENDIF
PUBLIC CLIB_64BIT_FLOATS
IF !DEFINED_CLIB_64BIT_FLOATS
    defc CLIB_64BIT_FLOATS = 0
ENDIF
   
; Maximum number of FILEs available
IF !DEFINED_CLIB_FOPEN_MAX
    defc    CLIB_FOPEN_MAX = 10
ENDIF

PUBLIC  __FOPEN_MAX
defc    __FOPEN_MAX = CLIB_FOPEN_MAX

; Maximum number of fds available
IF !DEFINED_CLIB_OPEN_MAX
    defc    CLIB_OPEN_MAX = CLIB_FOPEN_MAX
ENDIF

PUBLIC  __CLIB_OPEN_MAX
defc    __CLIB_OPEN_MAX = CLIB_OPEN_MAX

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SET UP MEMORY MAP ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

include(`crt_memory_map.inc')

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; STARTUP ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SECTION CODE

PUBLIC __Start, __Exit

EXTERN _main

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; USER PREAMBLE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

IF __crt_include_preamble

    include "crt_preamble.asm"
    SECTION CODE

ENDIF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PAGE ZERO ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

IF (ASMPC = 0) && (__crt_org_code = 0)

   include "../crt_page_zero_8085.inc"

ENDIF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CRT INIT ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.__Start

    include "../crt_start_di.inc"
    include "../crt_save_sp.inc"

.__Restart

    include "../crt_init_sp.inc"

   ; command line

IF (__crt_enable_commandline = 1) || (__crt_enable_commandline >= 3)

    include "../crt_cmdline_empty.inc"

ENDIF

.__Restart_2

IF __crt_enable_commandline >= 1

    push hl                     ; argv
    push bc                     ; argc

ENDIF

SECTION code_crt_init          ; user and library initialization

; The classic CRTs need some things setup, so do it

    SECTION code_crt_init

IF ( __crt_model = 1 )

    ; rom model + data section is not compressed

    EXTERN  __CODE_END_tail
    EXTERN  __DATA_head, __DATA_END_tail

    ld hl,__CODE_END_tail
    ld de,__DATA_head
    ld bc,__DATA_END_tail-__DATA_head

    EXTERN  asm_memcpy
    call asm_memcpy

ELIF ( __crt_model >= 2 )

    ; rom model + data section is compressed

    EXTERN  __CODE_END_tail
    EXTERN  __DATA_head, __DATA_END_tail

    ld hl,__CODE_END_tail
    ld de,__DATA_head
    ld bc,__DATA_END_tail-__DATA_head

    ld a,b
    or c

  IF ( __crt_model = 2)
    EXTERN  asm_dzx7_standard
    call NZ, asm_dzx7_standard
  ELIF ( __crt_model = 3)
    EXTERN  asm_dzx0_standard
    call NZ, asm_dzx0_standard
  ENDIF

ENDIF

IF __crt_initialize_bss = 1

    EXTERN  __BSS_head
    EXTERN  __BSS_UNINITIALIZED_head

    ld hl,__BSS_head
    ld bc,__BSS_UNINITIALIZED_head-__BSS_head-1

.init_bss_8085
    ld (hl),0
    inc hl
    dec bc
    jp NK,init_bss_8085

ENDIF

IF CRT_ENABLE_STDIO = 1

    ; Setup std* streams
    ld hl,__sgoioblk+2
    ld (hl),19                  ; stdin
    ld hl,__sgoioblk+12
    ld (hl),21                  ; stdout
    ld hl,__sgoioblk+22
    ld (hl),21                  ; stderr

ENDIF

    ; copy interrupt vector table to final location

    include "../crt_set_interrupt_mode.inc"

    include "../../../../lib/crt/classic/crt_init_heap.inc"

    ; set interrupt mode

    ld a,$DD
    sim                         ; reset R7.5, set MSE and unmask R6.5

SECTION code_crt_init           ; user and library initialization

    ; The UART must be initialized before main is called

EXTERN _uart_need
defc NEED = _uart_need

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MAIN ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SECTION code_crt_main

    include "../crt_start_ei.inc"

    ; call user program

    call _main                  ; hl = return status

    ; run exit stack

IF __clib_exit_stack_size > 0

    EXTERN asm_exit
    jp asm_exit                 ; exit function jumps to __Exit

ENDIF

.__Exit

IF !((__crt_on_exit & 0x10000) && (__crt_on_exit & 0x8))

    ; not restarting

    push hl                     ; save return status

ENDIF

SECTION code_crt_exit           ; user and library cleanup
SECTION code_crt_return

    ; close files

    include "../clib_close.inc"

    ; terminate

    include "../crt_exit_eidi.inc"
    include "../crt_restore_sp.inc"
    include "../crt_program_exit.inc"

.l_dcal
    jp (hl)                     ; used for function pointer calls

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; RUNTIME VARS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    SECTION data_crt

include "../../../../lib/crt/classic/crt_runtime_selection.inc" 

PUBLIC _8085_int65
EXTERN _uart_interrupt

defc _8085_int65 = _uart_interrupt

include "../crt_jump_vectors_8085.inc"

    SECTION bss_crt

PUBLIC  saved_hl                ;Temporary store used by compiler for 8085
saved_hl:
    defw    0                   ;for hl

IF CRT_ENABLE_STDIO = 1 && CLIB_FOPEN_MAX > 0
    PUBLIC  __sgoioblk
    PUBLIC  __sgoioblk_end
__sgoioblk:                     ;stdio control block
    defs    CLIB_FOPEN_MAX * 10
__sgoioblk_end:                 ;end of stdio control block
ENDIF

IF !DEFINED_basegraphics
    PUBLIC  base_graphics
base_graphics:
    defw    0                   ;address of graphics map
ENDIF

IF __clib_malloc_heap_size > 0
    PUBLIC  _heap
    ; The heap pointer will be wiped at bss initialisation.
    ; Its value (based on __tail) will be set later if set
    ; by sbrk() during AMALLOC initialisation.
_heap:
    defw    0,0                 ;populated by crt_heap_init.inc
__autoheap:
    defs    __clib_malloc_heap_size

ELIF DEFINED_CRT_HEAP_AMALLOC ||  __crt_stack_size > 0
    PUBLIC  _heap
_heap:
    defw    0                   ;populated by crt_heap_init.inc
    defw    0

ENDIF

IF CLIB_BALLOC_TABLE_SIZE > 0

    ; create balloc table
    SECTION data_alloc_balloc
    PUBLIC  __balloc_array
__balloc_array:
    defw __balloc_table

    SECTION bss_alloc_balloc
    PUBLIC  __balloc_table
__balloc_table:
    defs CLIB_BALLOC_TABLE_SIZE * 2

ENDIF

IF (__crt_on_exit & 0x10000) && ((__crt_on_exit & 0x6) || ((__crt_on_exit & 0x8) && (__register_sp = -1)))

    SECTION BSS_UNINITIALIZED
    __sp_or_ret:  defw 0

ENDIF

